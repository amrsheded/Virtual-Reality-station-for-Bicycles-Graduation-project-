
Rotary.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002002  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002002  00002096  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800068  00800068  0000209e  2**0
                  ALLOC
  3 .stab         00001b3c  00000000  00000000  000020a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c43  00000000  00000000  00003bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000481f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000495f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006718  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007603  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000083b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008510  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000879d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008f6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__vector_1>
       8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__vector_2>
       c:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 37       	cpi	r26, 0x73	; 115
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e0       	ldi	r30, 0x02	; 2
      78:	f0 e2       	ldi	r31, 0x20	; 32
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 ab 0c 	call	0x1956	; 0x1956 <main>
      8a:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <pwm>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DIO.h"
#include "Registers.h"
void pwm()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	       //////******************** TIMER 0 ********************//////
	SET_BIT(TCCR0_REG,PIN0);   //set clock select prescaler (no prescaling)
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,PIN1);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8d 7f       	andi	r24, 0xFD	; 253
     b68:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,PIN2);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8b 7f       	andi	r24, 0xFB	; 251
     b76:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,PIN3);   //phase correct pwm
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	87 7f       	andi	r24, 0xF7	; 247
     b84:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,PIN6);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 64       	ori	r24, 0x40	; 64
     b92:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,PIN4);  //Set OC0 on compare match when up-counting
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 61       	ori	r24, 0x10	; 16
     ba0:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,PIN5);  // Clear OC0 on compare	match when downcounting
     ba2:	a3 e5       	ldi	r26, 0x53	; 83
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e3 e5       	ldi	r30, 0x53	; 83
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 62       	ori	r24, 0x20	; 32
     bae:	8c 93       	st	X, r24

	      //////******************** TIMER 2 ********************//////
	SET_BIT(TCCR2_REG,PIN0);   //set clock select prescaler (no prescaling)
     bb0:	a5 e4       	ldi	r26, 0x45	; 69
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e5 e4       	ldi	r30, 0x45	; 69
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	8c 93       	st	X, r24
	CLR_BIT(TCCR2_REG,PIN1);
     bbe:	a5 e4       	ldi	r26, 0x45	; 69
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e5 e4       	ldi	r30, 0x45	; 69
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8d 7f       	andi	r24, 0xFD	; 253
     bca:	8c 93       	st	X, r24
    CLR_BIT(TCCR2_REG,PIN2);
     bcc:	a5 e4       	ldi	r26, 0x45	; 69
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e5 e4       	ldi	r30, 0x45	; 69
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8b 7f       	andi	r24, 0xFB	; 251
     bd8:	8c 93       	st	X, r24
    CLR_BIT(TCCR2_REG,PIN3);   //phase correct pwm
     bda:	a5 e4       	ldi	r26, 0x45	; 69
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e5 e4       	ldi	r30, 0x45	; 69
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	87 7f       	andi	r24, 0xF7	; 247
     be6:	8c 93       	st	X, r24
	SET_BIT(TCCR2_REG,PIN4);   //Set OC0 on compare match when up-counting
     be8:	a5 e4       	ldi	r26, 0x45	; 69
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e5 e4       	ldi	r30, 0x45	; 69
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 61       	ori	r24, 0x10	; 16
     bf4:	8c 93       	st	X, r24
	SET_BIT(TCCR2_REG,PIN5);   // Clear OC0 on compare	match when downcounting
     bf6:	a5 e4       	ldi	r26, 0x45	; 69
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e5 e4       	ldi	r30, 0x45	; 69
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 62       	ori	r24, 0x20	; 32
     c02:	8c 93       	st	X, r24
    SET_BIT(TCCR2_REG,PIN6);	//phase correct pwm
     c04:	a5 e4       	ldi	r26, 0x45	; 69
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e5 e4       	ldi	r30, 0x45	; 69
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 64       	ori	r24, 0x40	; 64
     c10:	8c 93       	st	X, r24

}
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <MotorStatus>:

void MotorStatus(u8 direction,u8 status)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <MotorStatus+0x6>
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	6a 83       	std	Y+2, r22	; 0x02
	if(direction=='R')
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	82 35       	cpi	r24, 0x52	; 82
     c2a:	31 f4       	brne	.+12     	; 0xc38 <MotorStatus+0x20>
	{
		DIO_SetPinValue(MY_PORTB,PIN0,status);
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	4a 81       	ldd	r20, Y+2	; 0x02
     c32:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_SetPinValue>
     c36:	08 c0       	rjmp	.+16     	; 0xc48 <MotorStatus+0x30>
	}else if(direction=='L')
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	8c 34       	cpi	r24, 0x4C	; 76
     c3c:	29 f4       	brne	.+10     	; 0xc48 <MotorStatus+0x30>
	{
		DIO_SetPinValue(MY_PORTB,PIN1,status);
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	4a 81       	ldd	r20, Y+2	; 0x02
     c44:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_SetPinValue>
	}
}
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <RunMotor>:
void RunMotor(u8 direction,u8 pwm)
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	00 d0       	rcall	.+0      	; 0xc58 <RunMotor+0x6>
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	6a 83       	std	Y+2, r22	; 0x02
	if(direction=='R')
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	82 35       	cpi	r24, 0x52	; 82
     c64:	29 f4       	brne	.+10     	; 0xc70 <RunMotor+0x1e>
	{
		OCR0_REG=pwm;
     c66:	ec e5       	ldi	r30, 0x5C	; 92
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	80 83       	st	Z, r24
     c6e:	07 c0       	rjmp	.+14     	; 0xc7e <RunMotor+0x2c>
	}else if(direction=='L')
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	8c 34       	cpi	r24, 0x4C	; 76
     c74:	21 f4       	brne	.+8      	; 0xc7e <RunMotor+0x2c>
	{
		OCR2_REG=pwm;
     c76:	e3 e4       	ldi	r30, 0x43	; 67
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	80 83       	st	Z, r24
	}
}
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <ControlMotorDirection>:
void ControlMotorDirection(u8 direction,u8 status)
{
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <ControlMotorDirection+0x6>
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	89 83       	std	Y+1, r24	; 0x01
     c94:	6a 83       	std	Y+2, r22	; 0x02
	if(direction=='R')
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	82 35       	cpi	r24, 0x52	; 82
     c9a:	31 f4       	brne	.+12     	; 0xca8 <ControlMotorDirection+0x20>
	{
		DIO_SetPinDirection(MY_PORTB,PIN3,status);
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	63 e0       	ldi	r22, 0x03	; 3
     ca0:	4a 81       	ldd	r20, Y+2	; 0x02
     ca2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
     ca6:	08 c0       	rjmp	.+16     	; 0xcb8 <ControlMotorDirection+0x30>
	}else if(direction=='L')
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	8c 34       	cpi	r24, 0x4C	; 76
     cac:	29 f4       	brne	.+10     	; 0xcb8 <ControlMotorDirection+0x30>
	{
		DIO_SetPinDirection(MY_PORTD,PIN7,status);
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	67 e0       	ldi	r22, 0x07	; 7
     cb2:	4a 81       	ldd	r20, Y+2	; 0x02
     cb4:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
	}
}
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <DIO_SetPinDirection>:
#include"BIT_MATH.h"
#include"Registers.h"
#include "DIO.h"
                                        //set any BIT direction inside any Register
void DIO_SetPinDirection(u8 PortNumber, u8 PinNumber, u8 Direction)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	2b 97       	sbiw	r28, 0x0b	; 11
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	6a 83       	std	Y+2, r22	; 0x02
     cda:	4b 83       	std	Y+3, r20	; 0x03
	if(PortNumber==MY_PORTA)                                                      //DDRA Register
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	88 23       	and	r24, r24
     ce0:	c1 f5       	brne	.+112    	; 0xd52 <DIO_SetPinDirection+0x90>
	{
		switch(Direction)
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	3b 87       	std	Y+11, r19	; 0x0b
     cea:	2a 87       	std	Y+10, r18	; 0x0a
     cec:	8a 85       	ldd	r24, Y+10	; 0x0a
     cee:	9b 85       	ldd	r25, Y+11	; 0x0b
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	31 f0       	breq	.+12     	; 0xd00 <DIO_SetPinDirection+0x3e>
     cf4:	2a 85       	ldd	r18, Y+10	; 0x0a
     cf6:	3b 85       	ldd	r19, Y+11	; 0x0b
     cf8:	21 30       	cpi	r18, 0x01	; 1
     cfa:	31 05       	cpc	r19, r1
     cfc:	b1 f0       	breq	.+44     	; 0xd2a <DIO_SetPinDirection+0x68>
     cfe:	d9 c0       	rjmp	.+434    	; 0xeb2 <DIO_SetPinDirection+0x1f0>
		{
		case INPUT: CLR_BIT(DDRA_REG,PinNumber); break;
     d00:	aa e3       	ldi	r26, 0x3A	; 58
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	ea e3       	ldi	r30, 0x3A	; 58
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 2e       	mov	r0, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_SetPinDirection+0x5c>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_SetPinDirection+0x58>
     d22:	80 95       	com	r24
     d24:	84 23       	and	r24, r20
     d26:	8c 93       	st	X, r24
     d28:	c4 c0       	rjmp	.+392    	; 0xeb2 <DIO_SetPinDirection+0x1f0>
		case OUTPUT:SET_BIT(DDRA_REG,PinNumber); break;
     d2a:	aa e3       	ldi	r26, 0x3A	; 58
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ea e3       	ldi	r30, 0x3A	; 58
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_SetPinDirection+0x86>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_SetPinDirection+0x82>
     d4c:	84 2b       	or	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	b0 c0       	rjmp	.+352    	; 0xeb2 <DIO_SetPinDirection+0x1f0>
		}

	}
	else if(PortNumber==MY_PORTB)                                                 //DDRB Register
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	c1 f5       	brne	.+112    	; 0xdc8 <DIO_SetPinDirection+0x106>
	{
		switch(Direction)
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	39 87       	std	Y+9, r19	; 0x09
     d60:	28 87       	std	Y+8, r18	; 0x08
     d62:	88 85       	ldd	r24, Y+8	; 0x08
     d64:	99 85       	ldd	r25, Y+9	; 0x09
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	31 f0       	breq	.+12     	; 0xd76 <DIO_SetPinDirection+0xb4>
     d6a:	28 85       	ldd	r18, Y+8	; 0x08
     d6c:	39 85       	ldd	r19, Y+9	; 0x09
     d6e:	21 30       	cpi	r18, 0x01	; 1
     d70:	31 05       	cpc	r19, r1
     d72:	b1 f0       	breq	.+44     	; 0xda0 <DIO_SetPinDirection+0xde>
     d74:	9e c0       	rjmp	.+316    	; 0xeb2 <DIO_SetPinDirection+0x1f0>
		{
		case INPUT: CLR_BIT(DDRB_REG,PinNumber); break;
     d76:	a7 e3       	ldi	r26, 0x37	; 55
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e7 e3       	ldi	r30, 0x37	; 55
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_SetPinDirection+0xd2>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_SetPinDirection+0xce>
     d98:	80 95       	com	r24
     d9a:	84 23       	and	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	89 c0       	rjmp	.+274    	; 0xeb2 <DIO_SetPinDirection+0x1f0>
		case OUTPUT:SET_BIT(DDRB_REG,PinNumber); break;
     da0:	a7 e3       	ldi	r26, 0x37	; 55
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e7 e3       	ldi	r30, 0x37	; 55
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 2e       	mov	r0, r18
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <DIO_SetPinDirection+0xfc>
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	0a 94       	dec	r0
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <DIO_SetPinDirection+0xf8>
     dc2:	84 2b       	or	r24, r20
     dc4:	8c 93       	st	X, r24
     dc6:	75 c0       	rjmp	.+234    	; 0xeb2 <DIO_SetPinDirection+0x1f0>
		}

	}
	else if(PortNumber==MY_PORTC)                                                  //DDRC Register
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	82 30       	cpi	r24, 0x02	; 2
     dcc:	c1 f5       	brne	.+112    	; 0xe3e <DIO_SetPinDirection+0x17c>
	{
		switch(Direction)
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	3f 83       	std	Y+7, r19	; 0x07
     dd6:	2e 83       	std	Y+6, r18	; 0x06
     dd8:	8e 81       	ldd	r24, Y+6	; 0x06
     dda:	9f 81       	ldd	r25, Y+7	; 0x07
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	31 f0       	breq	.+12     	; 0xdec <DIO_SetPinDirection+0x12a>
     de0:	2e 81       	ldd	r18, Y+6	; 0x06
     de2:	3f 81       	ldd	r19, Y+7	; 0x07
     de4:	21 30       	cpi	r18, 0x01	; 1
     de6:	31 05       	cpc	r19, r1
     de8:	b1 f0       	breq	.+44     	; 0xe16 <DIO_SetPinDirection+0x154>
     dea:	63 c0       	rjmp	.+198    	; 0xeb2 <DIO_SetPinDirection+0x1f0>
		{
		case INPUT: CLR_BIT(DDRC_REG,PinNumber); break;
     dec:	a4 e3       	ldi	r26, 0x34	; 52
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e4 e3       	ldi	r30, 0x34	; 52
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_SetPinDirection+0x148>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_SetPinDirection+0x144>
     e0e:	80 95       	com	r24
     e10:	84 23       	and	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	4e c0       	rjmp	.+156    	; 0xeb2 <DIO_SetPinDirection+0x1f0>
		case OUTPUT:SET_BIT(DDRC_REG,PinNumber); break;
     e16:	a4 e3       	ldi	r26, 0x34	; 52
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e4 e3       	ldi	r30, 0x34	; 52
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_SetPinDirection+0x172>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_SetPinDirection+0x16e>
     e38:	84 2b       	or	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	3a c0       	rjmp	.+116    	; 0xeb2 <DIO_SetPinDirection+0x1f0>
		}

	}
	else if(PortNumber==MY_PORTD)                                                   //DDRD  Register
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	83 30       	cpi	r24, 0x03	; 3
     e42:	b9 f5       	brne	.+110    	; 0xeb2 <DIO_SetPinDirection+0x1f0>
	{
		switch(Direction)
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	3d 83       	std	Y+5, r19	; 0x05
     e4c:	2c 83       	std	Y+4, r18	; 0x04
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	9d 81       	ldd	r25, Y+5	; 0x05
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	31 f0       	breq	.+12     	; 0xe62 <DIO_SetPinDirection+0x1a0>
     e56:	2c 81       	ldd	r18, Y+4	; 0x04
     e58:	3d 81       	ldd	r19, Y+5	; 0x05
     e5a:	21 30       	cpi	r18, 0x01	; 1
     e5c:	31 05       	cpc	r19, r1
     e5e:	b1 f0       	breq	.+44     	; 0xe8c <DIO_SetPinDirection+0x1ca>
     e60:	28 c0       	rjmp	.+80     	; 0xeb2 <DIO_SetPinDirection+0x1f0>
		{
		case INPUT: CLR_BIT(DDRD_REG,PinNumber); break;
     e62:	a1 e3       	ldi	r26, 0x31	; 49
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e1 e3       	ldi	r30, 0x31	; 49
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_SetPinDirection+0x1be>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_SetPinDirection+0x1ba>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	13 c0       	rjmp	.+38     	; 0xeb2 <DIO_SetPinDirection+0x1f0>
		case OUTPUT:SET_BIT(DDRD_REG,PinNumber); break;
     e8c:	a1 e3       	ldi	r26, 0x31	; 49
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e1 e3       	ldi	r30, 0x31	; 49
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_SetPinDirection+0x1e8>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_SetPinDirection+0x1e4>
     eae:	84 2b       	or	r24, r20
     eb0:	8c 93       	st	X, r24
		}

	}

}
     eb2:	2b 96       	adiw	r28, 0x0b	; 11
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <DIO_SetPinValue>:

                                           //set BIT inside any Register with 0 or 1 volt
void DIO_SetPinValue(u8 PortNumber,u8 PinNumber,u8 PinValue)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	2b 97       	sbiw	r28, 0x0b	; 11
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	6a 83       	std	Y+2, r22	; 0x02
     edc:	4b 83       	std	Y+3, r20	; 0x03
	if(PortNumber==MY_PORTA)                                                         //PORTA Register
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	88 23       	and	r24, r24
     ee2:	c1 f5       	brne	.+112    	; 0xf54 <DIO_SetPinValue+0x90>
		{
			switch(PinValue)
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	3b 87       	std	Y+11, r19	; 0x0b
     eec:	2a 87       	std	Y+10, r18	; 0x0a
     eee:	8a 85       	ldd	r24, Y+10	; 0x0a
     ef0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	31 f0       	breq	.+12     	; 0xf02 <DIO_SetPinValue+0x3e>
     ef6:	2a 85       	ldd	r18, Y+10	; 0x0a
     ef8:	3b 85       	ldd	r19, Y+11	; 0x0b
     efa:	21 30       	cpi	r18, 0x01	; 1
     efc:	31 05       	cpc	r19, r1
     efe:	b1 f0       	breq	.+44     	; 0xf2c <DIO_SetPinValue+0x68>
     f00:	d9 c0       	rjmp	.+434    	; 0x10b4 <DIO_SetPinValue+0x1f0>
			{
			case LOW: CLR_BIT(PORTA_REG,PinNumber); break;
     f02:	ab e3       	ldi	r26, 0x3B	; 59
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	eb e3       	ldi	r30, 0x3B	; 59
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_SetPinValue+0x5c>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_SetPinValue+0x58>
     f24:	80 95       	com	r24
     f26:	84 23       	and	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	c4 c0       	rjmp	.+392    	; 0x10b4 <DIO_SetPinValue+0x1f0>
			case HIGH:SET_BIT(PORTA_REG,PinNumber); break;
     f2c:	ab e3       	ldi	r26, 0x3B	; 59
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	eb e3       	ldi	r30, 0x3B	; 59
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_SetPinValue+0x86>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_SetPinValue+0x82>
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	b0 c0       	rjmp	.+352    	; 0x10b4 <DIO_SetPinValue+0x1f0>
			}

		}
		else if(PortNumber==MY_PORTB)                                                 //PORTB Register
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	c1 f5       	brne	.+112    	; 0xfca <DIO_SetPinValue+0x106>
		{
			switch(PinValue)
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	39 87       	std	Y+9, r19	; 0x09
     f62:	28 87       	std	Y+8, r18	; 0x08
     f64:	88 85       	ldd	r24, Y+8	; 0x08
     f66:	99 85       	ldd	r25, Y+9	; 0x09
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	31 f0       	breq	.+12     	; 0xf78 <DIO_SetPinValue+0xb4>
     f6c:	28 85       	ldd	r18, Y+8	; 0x08
     f6e:	39 85       	ldd	r19, Y+9	; 0x09
     f70:	21 30       	cpi	r18, 0x01	; 1
     f72:	31 05       	cpc	r19, r1
     f74:	b1 f0       	breq	.+44     	; 0xfa2 <DIO_SetPinValue+0xde>
     f76:	9e c0       	rjmp	.+316    	; 0x10b4 <DIO_SetPinValue+0x1f0>
			{
			case LOW: CLR_BIT(PORTB_REG,PinNumber); break;
     f78:	a8 e3       	ldi	r26, 0x38	; 56
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e8 e3       	ldi	r30, 0x38	; 56
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_SetPinValue+0xd2>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_SetPinValue+0xce>
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	89 c0       	rjmp	.+274    	; 0x10b4 <DIO_SetPinValue+0x1f0>
			case HIGH:SET_BIT(PORTB_REG,PinNumber); break;
     fa2:	a8 e3       	ldi	r26, 0x38	; 56
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e8 e3       	ldi	r30, 0x38	; 56
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_SetPinValue+0xfc>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_SetPinValue+0xf8>
     fc4:	84 2b       	or	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	75 c0       	rjmp	.+234    	; 0x10b4 <DIO_SetPinValue+0x1f0>
			}

		}
		else if(PortNumber==MY_PORTC)                                                 //PORTC Register
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	c1 f5       	brne	.+112    	; 0x1040 <DIO_SetPinValue+0x17c>
		{
			switch(PinValue)
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	3f 83       	std	Y+7, r19	; 0x07
     fd8:	2e 83       	std	Y+6, r18	; 0x06
     fda:	8e 81       	ldd	r24, Y+6	; 0x06
     fdc:	9f 81       	ldd	r25, Y+7	; 0x07
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	31 f0       	breq	.+12     	; 0xfee <DIO_SetPinValue+0x12a>
     fe2:	2e 81       	ldd	r18, Y+6	; 0x06
     fe4:	3f 81       	ldd	r19, Y+7	; 0x07
     fe6:	21 30       	cpi	r18, 0x01	; 1
     fe8:	31 05       	cpc	r19, r1
     fea:	b1 f0       	breq	.+44     	; 0x1018 <DIO_SetPinValue+0x154>
     fec:	63 c0       	rjmp	.+198    	; 0x10b4 <DIO_SetPinValue+0x1f0>
			{
			case LOW: CLR_BIT(PORTC_REG,PinNumber); break;
     fee:	a5 e3       	ldi	r26, 0x35	; 53
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e5 e3       	ldi	r30, 0x35	; 53
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_SetPinValue+0x148>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_SetPinValue+0x144>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	4e c0       	rjmp	.+156    	; 0x10b4 <DIO_SetPinValue+0x1f0>
			case HIGH:SET_BIT(PORTC_REG,PinNumber); break;
    1018:	a5 e3       	ldi	r26, 0x35	; 53
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e5 e3       	ldi	r30, 0x35	; 53
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_SetPinValue+0x172>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_SetPinValue+0x16e>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	3a c0       	rjmp	.+116    	; 0x10b4 <DIO_SetPinValue+0x1f0>
			}

		}
		else if(PortNumber==MY_PORTD)                                                 //PORTD Register
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	83 30       	cpi	r24, 0x03	; 3
    1044:	b9 f5       	brne	.+110    	; 0x10b4 <DIO_SetPinValue+0x1f0>
		{
			switch(PinValue)
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3d 83       	std	Y+5, r19	; 0x05
    104e:	2c 83       	std	Y+4, r18	; 0x04
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	9d 81       	ldd	r25, Y+5	; 0x05
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	31 f0       	breq	.+12     	; 0x1064 <DIO_SetPinValue+0x1a0>
    1058:	2c 81       	ldd	r18, Y+4	; 0x04
    105a:	3d 81       	ldd	r19, Y+5	; 0x05
    105c:	21 30       	cpi	r18, 0x01	; 1
    105e:	31 05       	cpc	r19, r1
    1060:	b1 f0       	breq	.+44     	; 0x108e <DIO_SetPinValue+0x1ca>
    1062:	28 c0       	rjmp	.+80     	; 0x10b4 <DIO_SetPinValue+0x1f0>
			{
			case LOW: CLR_BIT(PORTD_REG,PinNumber); break;
    1064:	a2 e3       	ldi	r26, 0x32	; 50
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e2 e3       	ldi	r30, 0x32	; 50
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO_SetPinValue+0x1be>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <DIO_SetPinValue+0x1ba>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	13 c0       	rjmp	.+38     	; 0x10b4 <DIO_SetPinValue+0x1f0>
			case HIGH:SET_BIT(PORTD_REG,PinNumber); break;
    108e:	a2 e3       	ldi	r26, 0x32	; 50
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e2 e3       	ldi	r30, 0x32	; 50
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_SetPinValue+0x1e8>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_SetPinValue+0x1e4>
    10b0:	84 2b       	or	r24, r20
    10b2:	8c 93       	st	X, r24
			}

		}
}
    10b4:	2b 96       	adiw	r28, 0x0b	; 11
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <DIO_GetPinValue>:
                                                //Get BIT value from a Register
u8 DIO_GetPinValue(u8 PortNumber,u8 PinNumber)
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <DIO_GetPinValue+0x6>
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <DIO_GetPinValue+0x8>
    10ce:	0f 92       	push	r0
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	8a 83       	std	Y+2, r24	; 0x02
    10d6:	6b 83       	std	Y+3, r22	; 0x03
	u8 retresult;
	switch(PortNumber)
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	3d 83       	std	Y+5, r19	; 0x05
    10e0:	2c 83       	std	Y+4, r18	; 0x04
    10e2:	4c 81       	ldd	r20, Y+4	; 0x04
    10e4:	5d 81       	ldd	r21, Y+5	; 0x05
    10e6:	41 30       	cpi	r20, 0x01	; 1
    10e8:	51 05       	cpc	r21, r1
    10ea:	41 f1       	breq	.+80     	; 0x113c <DIO_GetPinValue+0x76>
    10ec:	8c 81       	ldd	r24, Y+4	; 0x04
    10ee:	9d 81       	ldd	r25, Y+5	; 0x05
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	91 05       	cpc	r25, r1
    10f4:	34 f4       	brge	.+12     	; 0x1102 <DIO_GetPinValue+0x3c>
    10f6:	2c 81       	ldd	r18, Y+4	; 0x04
    10f8:	3d 81       	ldd	r19, Y+5	; 0x05
    10fa:	21 15       	cp	r18, r1
    10fc:	31 05       	cpc	r19, r1
    10fe:	61 f0       	breq	.+24     	; 0x1118 <DIO_GetPinValue+0x52>
    1100:	52 c0       	rjmp	.+164    	; 0x11a6 <DIO_GetPinValue+0xe0>
    1102:	4c 81       	ldd	r20, Y+4	; 0x04
    1104:	5d 81       	ldd	r21, Y+5	; 0x05
    1106:	42 30       	cpi	r20, 0x02	; 2
    1108:	51 05       	cpc	r21, r1
    110a:	51 f1       	breq	.+84     	; 0x1160 <DIO_GetPinValue+0x9a>
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	9d 81       	ldd	r25, Y+5	; 0x05
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	91 05       	cpc	r25, r1
    1114:	b9 f1       	breq	.+110    	; 0x1184 <DIO_GetPinValue+0xbe>
    1116:	47 c0       	rjmp	.+142    	; 0x11a6 <DIO_GetPinValue+0xe0>
	{
	case MY_PORTA: retresult=GET_BIT(PINA_REG,PinNumber); break;
    1118:	e9 e3       	ldi	r30, 0x39	; 57
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_GetPinValue+0x6a>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_GetPinValue+0x66>
    1134:	ca 01       	movw	r24, r20
    1136:	81 70       	andi	r24, 0x01	; 1
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	35 c0       	rjmp	.+106    	; 0x11a6 <DIO_GetPinValue+0xe0>
	case MY_PORTB: retresult=GET_BIT(PINB_REG,PinNumber); break;
    113c:	e6 e3       	ldi	r30, 0x36	; 54
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a9 01       	movw	r20, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_GetPinValue+0x8e>
    1150:	55 95       	asr	r21
    1152:	47 95       	ror	r20
    1154:	8a 95       	dec	r24
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_GetPinValue+0x8a>
    1158:	ca 01       	movw	r24, r20
    115a:	81 70       	andi	r24, 0x01	; 1
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	23 c0       	rjmp	.+70     	; 0x11a6 <DIO_GetPinValue+0xe0>
	case MY_PORTC: retresult=GET_BIT(PINC_REG,PinNumber); break;
    1160:	e3 e3       	ldi	r30, 0x33	; 51
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	a9 01       	movw	r20, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_GetPinValue+0xb2>
    1174:	55 95       	asr	r21
    1176:	47 95       	ror	r20
    1178:	8a 95       	dec	r24
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_GetPinValue+0xae>
    117c:	ca 01       	movw	r24, r20
    117e:	81 70       	andi	r24, 0x01	; 1
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	11 c0       	rjmp	.+34     	; 0x11a6 <DIO_GetPinValue+0xe0>
	case MY_PORTD: retresult=GET_BIT(PIND_REG,PinNumber); break;
    1184:	e0 e3       	ldi	r30, 0x30	; 48
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	a9 01       	movw	r20, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_GetPinValue+0xd6>
    1198:	55 95       	asr	r21
    119a:	47 95       	ror	r20
    119c:	8a 95       	dec	r24
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_GetPinValue+0xd2>
    11a0:	ca 01       	movw	r24, r20
    11a2:	81 70       	andi	r24, 0x01	; 1
    11a4:	89 83       	std	Y+1, r24	; 0x01
	}
return retresult ;
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <DIO_SetPortDirection>:
                                               //set all BIT direction inside any Register
void DIO_SetPortDirection(u8 PortNumber,u8 PortDirection)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	00 d0       	rcall	.+0      	; 0x11be <DIO_SetPortDirection+0x6>
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <DIO_SetPortDirection+0x8>
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <DIO_SetPortDirection+0xa>
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	6a 83       	std	Y+2, r22	; 0x02
	if(PortDirection==INPUT)
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	88 23       	and	r24, r24
    11ce:	79 f5       	brne	.+94     	; 0x122e <DIO_SetPortDirection+0x76>
	{
		switch(PortNumber)
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	3e 83       	std	Y+6, r19	; 0x06
    11d8:	2d 83       	std	Y+5, r18	; 0x05
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	9e 81       	ldd	r25, Y+6	; 0x06
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	91 05       	cpc	r25, r1
    11e2:	c9 f0       	breq	.+50     	; 0x1216 <DIO_SetPortDirection+0x5e>
    11e4:	2d 81       	ldd	r18, Y+5	; 0x05
    11e6:	3e 81       	ldd	r19, Y+6	; 0x06
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	31 05       	cpc	r19, r1
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <DIO_SetPortDirection+0x40>
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	61 f0       	breq	.+24     	; 0x120e <DIO_SetPortDirection+0x56>
    11f6:	50 c0       	rjmp	.+160    	; 0x1298 <DIO_SetPortDirection+0xe0>
    11f8:	2d 81       	ldd	r18, Y+5	; 0x05
    11fa:	3e 81       	ldd	r19, Y+6	; 0x06
    11fc:	22 30       	cpi	r18, 0x02	; 2
    11fe:	31 05       	cpc	r19, r1
    1200:	71 f0       	breq	.+28     	; 0x121e <DIO_SetPortDirection+0x66>
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	9e 81       	ldd	r25, Y+6	; 0x06
    1206:	83 30       	cpi	r24, 0x03	; 3
    1208:	91 05       	cpc	r25, r1
    120a:	69 f0       	breq	.+26     	; 0x1226 <DIO_SetPortDirection+0x6e>
    120c:	45 c0       	rjmp	.+138    	; 0x1298 <DIO_SetPortDirection+0xe0>
		{
		case MY_PORTA:  DDRA_REG=0x00;  break;
    120e:	ea e3       	ldi	r30, 0x3A	; 58
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	10 82       	st	Z, r1
    1214:	41 c0       	rjmp	.+130    	; 0x1298 <DIO_SetPortDirection+0xe0>
		case MY_PORTB:  DDRB_REG=0x00;  break;
    1216:	e7 e3       	ldi	r30, 0x37	; 55
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	10 82       	st	Z, r1
    121c:	3d c0       	rjmp	.+122    	; 0x1298 <DIO_SetPortDirection+0xe0>
		case MY_PORTC:  DDRC_REG=0x00;  break;
    121e:	e4 e3       	ldi	r30, 0x34	; 52
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	10 82       	st	Z, r1
    1224:	39 c0       	rjmp	.+114    	; 0x1298 <DIO_SetPortDirection+0xe0>
		case MY_PORTD:  DDRD_REG=0x00;  break;
    1226:	e1 e3       	ldi	r30, 0x31	; 49
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	10 82       	st	Z, r1
    122c:	35 c0       	rjmp	.+106    	; 0x1298 <DIO_SetPortDirection+0xe0>
		}
	}
	else if(PortDirection==OUTPUT)
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 f5       	brne	.+100    	; 0x1298 <DIO_SetPortDirection+0xe0>
	{
		switch(PortNumber)
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3c 83       	std	Y+4, r19	; 0x04
    123c:	2b 83       	std	Y+3, r18	; 0x03
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	d1 f0       	breq	.+52     	; 0x127c <DIO_SetPortDirection+0xc4>
    1248:	2b 81       	ldd	r18, Y+3	; 0x03
    124a:	3c 81       	ldd	r19, Y+4	; 0x04
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	2c f4       	brge	.+10     	; 0x125c <DIO_SetPortDirection+0xa4>
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	61 f0       	breq	.+24     	; 0x1272 <DIO_SetPortDirection+0xba>
    125a:	1e c0       	rjmp	.+60     	; 0x1298 <DIO_SetPortDirection+0xe0>
    125c:	2b 81       	ldd	r18, Y+3	; 0x03
    125e:	3c 81       	ldd	r19, Y+4	; 0x04
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	81 f0       	breq	.+32     	; 0x1286 <DIO_SetPortDirection+0xce>
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	91 05       	cpc	r25, r1
    126e:	81 f0       	breq	.+32     	; 0x1290 <DIO_SetPortDirection+0xd8>
    1270:	13 c0       	rjmp	.+38     	; 0x1298 <DIO_SetPortDirection+0xe0>
		{
		case MY_PORTA:  DDRA_REG=0xff;  break;
    1272:	ea e3       	ldi	r30, 0x3A	; 58
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	80 83       	st	Z, r24
    127a:	0e c0       	rjmp	.+28     	; 0x1298 <DIO_SetPortDirection+0xe0>
		case MY_PORTB:  DDRB_REG=0xff;  break;
    127c:	e7 e3       	ldi	r30, 0x37	; 55
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8f ef       	ldi	r24, 0xFF	; 255
    1282:	80 83       	st	Z, r24
    1284:	09 c0       	rjmp	.+18     	; 0x1298 <DIO_SetPortDirection+0xe0>
		case MY_PORTC:  DDRC_REG=0xff;  break;
    1286:	e4 e3       	ldi	r30, 0x34	; 52
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8f ef       	ldi	r24, 0xFF	; 255
    128c:	80 83       	st	Z, r24
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <DIO_SetPortDirection+0xe0>
		case MY_PORTD:  DDRD_REG=0xff;  break;
    1290:	e1 e3       	ldi	r30, 0x31	; 49
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	80 83       	st	Z, r24
		}
	}
}
    1298:	26 96       	adiw	r28, 0x06	; 6
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <DIO_SetPortValue>:
                                             //set all BIT inside any Register with 0 or 1 volt
void DIO_SetPortValue (u8 PortNumber, u8 PortValue)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <DIO_SetPortValue+0x6>
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <DIO_SetPortValue+0x8>
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	6a 83       	std	Y+2, r22	; 0x02
			switch(PortNumber)
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3c 83       	std	Y+4, r19	; 0x04
    12c2:	2b 83       	std	Y+3, r18	; 0x03
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	91 05       	cpc	r25, r1
    12cc:	d1 f0       	breq	.+52     	; 0x1302 <DIO_SetPortValue+0x58>
    12ce:	2b 81       	ldd	r18, Y+3	; 0x03
    12d0:	3c 81       	ldd	r19, Y+4	; 0x04
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <DIO_SetPortValue+0x38>
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	61 f0       	breq	.+24     	; 0x12f8 <DIO_SetPortValue+0x4e>
    12e0:	1e c0       	rjmp	.+60     	; 0x131e <DIO_SetPortValue+0x74>
    12e2:	2b 81       	ldd	r18, Y+3	; 0x03
    12e4:	3c 81       	ldd	r19, Y+4	; 0x04
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	31 05       	cpc	r19, r1
    12ea:	81 f0       	breq	.+32     	; 0x130c <DIO_SetPortValue+0x62>
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	91 05       	cpc	r25, r1
    12f4:	81 f0       	breq	.+32     	; 0x1316 <DIO_SetPortValue+0x6c>
    12f6:	13 c0       	rjmp	.+38     	; 0x131e <DIO_SetPortValue+0x74>
			{
			case MY_PORTA: PORTA_REG=PortValue;  break;
    12f8:	eb e3       	ldi	r30, 0x3B	; 59
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	80 83       	st	Z, r24
    1300:	0e c0       	rjmp	.+28     	; 0x131e <DIO_SetPortValue+0x74>
			case MY_PORTB: PORTB_REG=PortValue;  break;
    1302:	e8 e3       	ldi	r30, 0x38	; 56
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	80 83       	st	Z, r24
    130a:	09 c0       	rjmp	.+18     	; 0x131e <DIO_SetPortValue+0x74>
			case MY_PORTC: PORTC_REG=PortValue;  break;
    130c:	e5 e3       	ldi	r30, 0x35	; 53
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	80 83       	st	Z, r24
    1314:	04 c0       	rjmp	.+8      	; 0x131e <DIO_SetPortValue+0x74>
			case MY_PORTD: PORTD_REG=PortValue;  break;
    1316:	e2 e3       	ldi	r30, 0x32	; 50
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	80 83       	st	Z, r24
			}
}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <EXT_INT>:
*************************************************************************************************
                                  Exernal interrupt
************************************************************************************************/
                         // Initialization interrupt peripheral
void EXT_INT(u8 INT_number,u8 INT_sense)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	28 97       	sbiw	r28, 0x08	; 8
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	6a 83       	std	Y+2, r22	; 0x02
  if(INT_number==1)
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	09 f0       	breq	.+2      	; 0x134c <EXT_INT+0x20>
    134a:	63 c0       	rjmp	.+198    	; 0x1412 <EXT_INT+0xe6>
  {
     SET_BIT(GICR_REG,7);
    134c:	ab e5       	ldi	r26, 0x5B	; 91
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	eb e5       	ldi	r30, 0x5B	; 91
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	80 68       	ori	r24, 0x80	; 128
    1358:	8c 93       	st	X, r24
	switch(INT_sense)
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	38 87       	std	Y+8, r19	; 0x08
    1362:	2f 83       	std	Y+7, r18	; 0x07
    1364:	8f 81       	ldd	r24, Y+7	; 0x07
    1366:	98 85       	ldd	r25, Y+8	; 0x08
    1368:	82 30       	cpi	r24, 0x02	; 2
    136a:	91 05       	cpc	r25, r1
    136c:	29 f1       	breq	.+74     	; 0x13b8 <EXT_INT+0x8c>
    136e:	2f 81       	ldd	r18, Y+7	; 0x07
    1370:	38 85       	ldd	r19, Y+8	; 0x08
    1372:	23 30       	cpi	r18, 0x03	; 3
    1374:	31 05       	cpc	r19, r1
    1376:	34 f4       	brge	.+12     	; 0x1384 <EXT_INT+0x58>
    1378:	8f 81       	ldd	r24, Y+7	; 0x07
    137a:	98 85       	ldd	r25, Y+8	; 0x08
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	91 05       	cpc	r25, r1
    1380:	61 f0       	breq	.+24     	; 0x139a <EXT_INT+0x6e>
    1382:	d7 c0       	rjmp	.+430    	; 0x1532 <EXT_INT+0x206>
    1384:	2f 81       	ldd	r18, Y+7	; 0x07
    1386:	38 85       	ldd	r19, Y+8	; 0x08
    1388:	23 30       	cpi	r18, 0x03	; 3
    138a:	31 05       	cpc	r19, r1
    138c:	21 f1       	breq	.+72     	; 0x13d6 <EXT_INT+0xaa>
    138e:	8f 81       	ldd	r24, Y+7	; 0x07
    1390:	98 85       	ldd	r25, Y+8	; 0x08
    1392:	84 30       	cpi	r24, 0x04	; 4
    1394:	91 05       	cpc	r25, r1
    1396:	71 f1       	breq	.+92     	; 0x13f4 <EXT_INT+0xc8>
    1398:	cc c0       	rjmp	.+408    	; 0x1532 <EXT_INT+0x206>
	{
	case Rising:
		{
			SET_BIT(MCUCR_REG,2);
    139a:	a5 e5       	ldi	r26, 0x55	; 85
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e5 e5       	ldi	r30, 0x55	; 85
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	84 60       	ori	r24, 0x04	; 4
    13a6:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,3);
    13a8:	a5 e5       	ldi	r26, 0x55	; 85
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e5 e5       	ldi	r30, 0x55	; 85
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	88 60       	ori	r24, 0x08	; 8
    13b4:	8c 93       	st	X, r24
    13b6:	bd c0       	rjmp	.+378    	; 0x1532 <EXT_INT+0x206>
			break;
		}
	case Falling:
	    {
		    CLR_BIT(MCUCR_REG,2);
    13b8:	a5 e5       	ldi	r26, 0x55	; 85
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e5 e5       	ldi	r30, 0x55	; 85
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8b 7f       	andi	r24, 0xFB	; 251
    13c4:	8c 93       	st	X, r24
		    SET_BIT(MCUCR_REG,3);
    13c6:	a5 e5       	ldi	r26, 0x55	; 85
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e5 e5       	ldi	r30, 0x55	; 85
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	88 60       	ori	r24, 0x08	; 8
    13d2:	8c 93       	st	X, r24
    13d4:	ae c0       	rjmp	.+348    	; 0x1532 <EXT_INT+0x206>
		    break;
	    }
	case Logical_change:
	    {
			 SET_BIT(MCUCR_REG,2);
    13d6:	a5 e5       	ldi	r26, 0x55	; 85
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e5       	ldi	r30, 0x55	; 85
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	84 60       	ori	r24, 0x04	; 4
    13e2:	8c 93       	st	X, r24
			 CLR_BIT(MCUCR_REG,3);
    13e4:	a5 e5       	ldi	r26, 0x55	; 85
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e5       	ldi	r30, 0x55	; 85
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	87 7f       	andi	r24, 0xF7	; 247
    13f0:	8c 93       	st	X, r24
    13f2:	9f c0       	rjmp	.+318    	; 0x1532 <EXT_INT+0x206>
			 break;
        }
	case Low_level:
	    {
			 CLR_BIT(MCUCR_REG,2);
    13f4:	a5 e5       	ldi	r26, 0x55	; 85
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e5 e5       	ldi	r30, 0x55	; 85
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	8b 7f       	andi	r24, 0xFB	; 251
    1400:	8c 93       	st	X, r24
			 CLR_BIT(MCUCR_REG,3);
    1402:	a5 e5       	ldi	r26, 0x55	; 85
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e5 e5       	ldi	r30, 0x55	; 85
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	87 7f       	andi	r24, 0xF7	; 247
    140e:	8c 93       	st	X, r24
    1410:	90 c0       	rjmp	.+288    	; 0x1532 <EXT_INT+0x206>
			 break;
        }
    }
  }else if(INT_number==0)
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	88 23       	and	r24, r24
    1416:	09 f0       	breq	.+2      	; 0x141a <EXT_INT+0xee>
    1418:	63 c0       	rjmp	.+198    	; 0x14e0 <EXT_INT+0x1b4>
  {
	  SET_BIT(GICR_REG,6);
    141a:	ab e5       	ldi	r26, 0x5B	; 91
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	eb e5       	ldi	r30, 0x5B	; 91
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	80 64       	ori	r24, 0x40	; 64
    1426:	8c 93       	st	X, r24
	  switch(INT_sense)
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3e 83       	std	Y+6, r19	; 0x06
    1430:	2d 83       	std	Y+5, r18	; 0x05
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	9e 81       	ldd	r25, Y+6	; 0x06
    1436:	82 30       	cpi	r24, 0x02	; 2
    1438:	91 05       	cpc	r25, r1
    143a:	29 f1       	breq	.+74     	; 0x1486 <EXT_INT+0x15a>
    143c:	2d 81       	ldd	r18, Y+5	; 0x05
    143e:	3e 81       	ldd	r19, Y+6	; 0x06
    1440:	23 30       	cpi	r18, 0x03	; 3
    1442:	31 05       	cpc	r19, r1
    1444:	34 f4       	brge	.+12     	; 0x1452 <EXT_INT+0x126>
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	91 05       	cpc	r25, r1
    144e:	61 f0       	breq	.+24     	; 0x1468 <EXT_INT+0x13c>
    1450:	70 c0       	rjmp	.+224    	; 0x1532 <EXT_INT+0x206>
    1452:	2d 81       	ldd	r18, Y+5	; 0x05
    1454:	3e 81       	ldd	r19, Y+6	; 0x06
    1456:	23 30       	cpi	r18, 0x03	; 3
    1458:	31 05       	cpc	r19, r1
    145a:	21 f1       	breq	.+72     	; 0x14a4 <EXT_INT+0x178>
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	84 30       	cpi	r24, 0x04	; 4
    1462:	91 05       	cpc	r25, r1
    1464:	71 f1       	breq	.+92     	; 0x14c2 <EXT_INT+0x196>
    1466:	65 c0       	rjmp	.+202    	; 0x1532 <EXT_INT+0x206>
	  	{
	  	case Rising:
	  		{
	  			SET_BIT(MCUCR_REG,0);
    1468:	a5 e5       	ldi	r26, 0x55	; 85
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e5       	ldi	r30, 0x55	; 85
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	81 60       	ori	r24, 0x01	; 1
    1474:	8c 93       	st	X, r24
	  			SET_BIT(MCUCR_REG,1);
    1476:	a5 e5       	ldi	r26, 0x55	; 85
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e5 e5       	ldi	r30, 0x55	; 85
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	82 60       	ori	r24, 0x02	; 2
    1482:	8c 93       	st	X, r24
    1484:	56 c0       	rjmp	.+172    	; 0x1532 <EXT_INT+0x206>
	  			break;
	  		}
	  	case Falling:
	  	    {
	  		    CLR_BIT(MCUCR_REG,0);
    1486:	a5 e5       	ldi	r26, 0x55	; 85
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e5 e5       	ldi	r30, 0x55	; 85
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	8e 7f       	andi	r24, 0xFE	; 254
    1492:	8c 93       	st	X, r24
	  		    SET_BIT(MCUCR_REG,1);
    1494:	a5 e5       	ldi	r26, 0x55	; 85
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e5 e5       	ldi	r30, 0x55	; 85
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	82 60       	ori	r24, 0x02	; 2
    14a0:	8c 93       	st	X, r24
    14a2:	47 c0       	rjmp	.+142    	; 0x1532 <EXT_INT+0x206>
	  		    break;
	  	    }
	  	case Logical_change:
	  	    {
	  			 SET_BIT(MCUCR_REG,0);
    14a4:	a5 e5       	ldi	r26, 0x55	; 85
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e5 e5       	ldi	r30, 0x55	; 85
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	81 60       	ori	r24, 0x01	; 1
    14b0:	8c 93       	st	X, r24
	  			 CLR_BIT(MCUCR_REG,1);
    14b2:	a5 e5       	ldi	r26, 0x55	; 85
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e5 e5       	ldi	r30, 0x55	; 85
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8d 7f       	andi	r24, 0xFD	; 253
    14be:	8c 93       	st	X, r24
    14c0:	38 c0       	rjmp	.+112    	; 0x1532 <EXT_INT+0x206>
	  			 break;
	        }
	  	case Low_level:
	  	    {
	  			 CLR_BIT(MCUCR_REG,0);
    14c2:	a5 e5       	ldi	r26, 0x55	; 85
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e5 e5       	ldi	r30, 0x55	; 85
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	8e 7f       	andi	r24, 0xFE	; 254
    14ce:	8c 93       	st	X, r24
	  			 CLR_BIT(MCUCR_REG,1);
    14d0:	a5 e5       	ldi	r26, 0x55	; 85
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e5 e5       	ldi	r30, 0x55	; 85
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	8d 7f       	andi	r24, 0xFD	; 253
    14dc:	8c 93       	st	X, r24
    14de:	29 c0       	rjmp	.+82     	; 0x1532 <EXT_INT+0x206>
	  			 break;
	        }
	    }

  }else if(INT_number==2)
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	82 30       	cpi	r24, 0x02	; 2
    14e4:	31 f5       	brne	.+76     	; 0x1532 <EXT_INT+0x206>
  {
	  SET_BIT(GICR_REG,5);
    14e6:	ab e5       	ldi	r26, 0x5B	; 91
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	eb e5       	ldi	r30, 0x5B	; 91
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	80 62       	ori	r24, 0x20	; 32
    14f2:	8c 93       	st	X, r24
	  switch(INT_sense)
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	3c 83       	std	Y+4, r19	; 0x04
    14fc:	2b 83       	std	Y+3, r18	; 0x03
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	91 05       	cpc	r25, r1
    1506:	31 f0       	breq	.+12     	; 0x1514 <EXT_INT+0x1e8>
    1508:	2b 81       	ldd	r18, Y+3	; 0x03
    150a:	3c 81       	ldd	r19, Y+4	; 0x04
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	49 f0       	breq	.+18     	; 0x1524 <EXT_INT+0x1f8>
    1512:	0f c0       	rjmp	.+30     	; 0x1532 <EXT_INT+0x206>
	  	{
	  case Rising:
	  	  {
	  	  		SET_BIT(MCUCSR_REG,6);
    1514:	a4 e5       	ldi	r26, 0x54	; 84
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e4 e5       	ldi	r30, 0x54	; 84
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	80 64       	ori	r24, 0x40	; 64
    1520:	8c 93       	st	X, r24
    1522:	07 c0       	rjmp	.+14     	; 0x1532 <EXT_INT+0x206>
	  	  		break;
	  	  }
	  case Falling:
	 	   {
	 	  	  	CLR_BIT(MCUCSR_REG,6);
    1524:	a4 e5       	ldi	r26, 0x54	; 84
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e4 e5       	ldi	r30, 0x54	; 84
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	8f 7b       	andi	r24, 0xBF	; 191
    1530:	8c 93       	st	X, r24
	 	  	  	break;
	 	   }
	    }
  }
}
    1532:	28 96       	adiw	r28, 0x08	; 8
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <Check_flag>:

u8 Check_flag(u8 INT_number)            //Funtion for check flag if interrupt is executed
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <Check_flag+0x6>
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	8a 83       	std	Y+2, r24	; 0x02
	u8 flag;
	if(INT_number==0)
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	88 23       	and	r24, r24
    1554:	51 f4       	brne	.+20     	; 0x156a <Check_flag+0x26>
	{
		flag=GET_BIT(GIFR_REG,6);
    1556:	ea e5       	ldi	r30, 0x5A	; 90
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	82 95       	swap	r24
    155e:	86 95       	lsr	r24
    1560:	86 95       	lsr	r24
    1562:	83 70       	andi	r24, 0x03	; 3
    1564:	81 70       	andi	r24, 0x01	; 1
    1566:	89 83       	std	Y+1, r24	; 0x01
    1568:	16 c0       	rjmp	.+44     	; 0x1596 <Check_flag+0x52>
	}else if(INT_number==1)
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	41 f4       	brne	.+16     	; 0x1580 <Check_flag+0x3c>
	{
		flag=GET_BIT(GIFR_REG,7);
    1570:	ea e5       	ldi	r30, 0x5A	; 90
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	88 1f       	adc	r24, r24
    1578:	88 27       	eor	r24, r24
    157a:	88 1f       	adc	r24, r24
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	0b c0       	rjmp	.+22     	; 0x1596 <Check_flag+0x52>
	}else if(INT_number==2)
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	82 30       	cpi	r24, 0x02	; 2
    1584:	41 f4       	brne	.+16     	; 0x1596 <Check_flag+0x52>
	{
		flag=GET_BIT(GIFR_REG,5);
    1586:	ea e5       	ldi	r30, 0x5A	; 90
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	82 95       	swap	r24
    158e:	86 95       	lsr	r24
    1590:	87 70       	andi	r24, 0x07	; 7
    1592:	81 70       	andi	r24, 0x01	; 1
    1594:	89 83       	std	Y+1, r24	; 0x01
	}
return flag;
    1596:	89 81       	ldd	r24, Y+1	; 0x01
}
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <UART_vidInit>:
 */
#include"STD_TYPES.h"
#include"Registers.h"

void UART_vidInit(void)                  //Function to Initilaize UART peripheral
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
	UBRRL_REG=77;
    15aa:	e9 e2       	ldi	r30, 0x29	; 41
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	8d e4       	ldi	r24, 0x4D	; 77
    15b0:	80 83       	st	Z, r24
	UBRRH_REG=0;
    15b2:	e0 e4       	ldi	r30, 0x40	; 64
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	10 82       	st	Z, r1
	UCSRC_REG=0b10000110;
    15b8:	e0 e4       	ldi	r30, 0x40	; 64
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	86 e8       	ldi	r24, 0x86	; 134
    15be:	80 83       	st	Z, r24
	UCSRB_REG=0b00011000;
    15c0:	ea e2       	ldi	r30, 0x2A	; 42
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	88 e1       	ldi	r24, 0x18	; 24
    15c6:	80 83       	st	Z, r24

}
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <UART_vidSendData>:

void UART_vidSendData(u16 Data)           //Function to send data from microcontroller to any device
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <UART_vidSendData+0x6>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	9a 83       	std	Y+2, r25	; 0x02
    15da:	89 83       	std	Y+1, r24	; 0x01
	while(((UCSRA_REG)&(1<<5))==0);
    15dc:	eb e2       	ldi	r30, 0x2B	; 43
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	80 72       	andi	r24, 0x20	; 32
    15e8:	90 70       	andi	r25, 0x00	; 0
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	b9 f3       	breq	.-18     	; 0x15dc <UART_vidSendData+0xe>
     UDR_REG=Data;
    15ee:	ec e2       	ldi	r30, 0x2C	; 44
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	80 83       	st	Z, r24
}
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <UART_u8ReciveData>:

u8 UART_u8ReciveData(void)               //Function to Receive data to microcontroler from any device
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	0f 92       	push	r0
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
u8 retval;
while(((UCSRA_REG)&(1<<7))==0);
    160a:	eb e2       	ldi	r30, 0x2B	; 43
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	88 23       	and	r24, r24
    1612:	dc f7       	brge	.-10     	; 0x160a <UART_u8ReciveData+0xa>

	retval=UDR_REG;
    1614:	ec e2       	ldi	r30, 0x2C	; 44
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	89 83       	std	Y+1, r24	; 0x01
	return retval;
    161c:	89 81       	ldd	r24, Y+1	; 0x01

}
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <UART_vidSendStr>:
 */
#include"STD_TYPES.h"
#include"UART.h"

void UART_vidSendStr(u8 *str)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <UART_vidSendStr+0x6>
    162c:	0f 92       	push	r0
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	9b 83       	std	Y+3, r25	; 0x03
    1634:	8a 83       	std	Y+2, r24	; 0x02
u8 i=0;
    1636:	19 82       	std	Y+1, r1	; 0x01
    1638:	10 c0       	rjmp	.+32     	; 0x165a <UART_vidSendStr+0x34>
while(str[i]!=0)
{
	UART_vidSendData(str[i]);
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	9b 81       	ldd	r25, Y+3	; 0x03
    1644:	fc 01       	movw	r30, r24
    1646:	e2 0f       	add	r30, r18
    1648:	f3 1f       	adc	r31, r19
    164a:	80 81       	ld	r24, Z
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>
	i++;
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	8f 5f       	subi	r24, 0xFF	; 255
    1658:	89 83       	std	Y+1, r24	; 0x01
#include"UART.h"

void UART_vidSendStr(u8 *str)
{
u8 i=0;
while(str[i]!=0)
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	9b 81       	ldd	r25, Y+3	; 0x03
    1664:	fc 01       	movw	r30, r24
    1666:	e2 0f       	add	r30, r18
    1668:	f3 1f       	adc	r31, r19
    166a:	80 81       	ld	r24, Z
    166c:	88 23       	and	r24, r24
    166e:	29 f7       	brne	.-54     	; 0x163a <UART_vidSendStr+0x14>
{
	UART_vidSendData(str[i]);
	i++;
}
}
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <UART_vidPrintNumber>:


void UART_vidPrintNumber(u16 number)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	00 d0       	rcall	.+0      	; 0x1682 <UART_vidPrintNumber+0x6>
    1682:	0f 92       	push	r0
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	9b 83       	std	Y+3, r25	; 0x03
    168a:	8a 83       	std	Y+2, r24	; 0x02
	u8 digit;

	if(number > 1000)
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	9b 81       	ldd	r25, Y+3	; 0x03
    1690:	23 e0       	ldi	r18, 0x03	; 3
    1692:	89 3e       	cpi	r24, 0xE9	; 233
    1694:	92 07       	cpc	r25, r18
    1696:	08 f4       	brcc	.+2      	; 0x169a <UART_vidPrintNumber+0x1e>
    1698:	72 c0       	rjmp	.+228    	; 0x177e <UART_vidPrintNumber+0x102>
	{
		digit = number / 1000;
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	9b 81       	ldd	r25, Y+3	; 0x03
    169e:	28 ee       	ldi	r18, 0xE8	; 232
    16a0:	33 e0       	ldi	r19, 0x03	; 3
    16a2:	b9 01       	movw	r22, r18
    16a4:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__udivmodhi4>
    16a8:	cb 01       	movw	r24, r22
    16aa:	89 83       	std	Y+1, r24	; 0x01

		UART_vidSendData(digit + 48);
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	c0 96       	adiw	r24, 0x30	; 48
    16b4:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>

		number = number - digit * 1000;
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	88 e1       	ldi	r24, 0x18	; 24
    16c0:	9c ef       	ldi	r25, 0xFC	; 252
    16c2:	ac 01       	movw	r20, r24
    16c4:	24 9f       	mul	r18, r20
    16c6:	c0 01       	movw	r24, r0
    16c8:	25 9f       	mul	r18, r21
    16ca:	90 0d       	add	r25, r0
    16cc:	34 9f       	mul	r19, r20
    16ce:	90 0d       	add	r25, r0
    16d0:	11 24       	eor	r1, r1
    16d2:	9c 01       	movw	r18, r24
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	9b 81       	ldd	r25, Y+3	; 0x03
    16d8:	82 0f       	add	r24, r18
    16da:	93 1f       	adc	r25, r19
    16dc:	9b 83       	std	Y+3, r25	; 0x03
    16de:	8a 83       	std	Y+2, r24	; 0x02

		digit = number / 100;
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	9b 81       	ldd	r25, Y+3	; 0x03
    16e4:	24 e6       	ldi	r18, 0x64	; 100
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	b9 01       	movw	r22, r18
    16ea:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__udivmodhi4>
    16ee:	cb 01       	movw	r24, r22
    16f0:	89 83       	std	Y+1, r24	; 0x01

		UART_vidSendData(digit + 48);
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	c0 96       	adiw	r24, 0x30	; 48
    16fa:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>

		number = number - digit * 100;
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	8c e9       	ldi	r24, 0x9C	; 156
    1706:	9f ef       	ldi	r25, 0xFF	; 255
    1708:	ac 01       	movw	r20, r24
    170a:	24 9f       	mul	r18, r20
    170c:	c0 01       	movw	r24, r0
    170e:	25 9f       	mul	r18, r21
    1710:	90 0d       	add	r25, r0
    1712:	34 9f       	mul	r19, r20
    1714:	90 0d       	add	r25, r0
    1716:	11 24       	eor	r1, r1
    1718:	9c 01       	movw	r18, r24
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	9b 81       	ldd	r25, Y+3	; 0x03
    171e:	82 0f       	add	r24, r18
    1720:	93 1f       	adc	r25, r19
    1722:	9b 83       	std	Y+3, r25	; 0x03
    1724:	8a 83       	std	Y+2, r24	; 0x02

		digit = number / 10;
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	9b 81       	ldd	r25, Y+3	; 0x03
    172a:	2a e0       	ldi	r18, 0x0A	; 10
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	b9 01       	movw	r22, r18
    1730:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__udivmodhi4>
    1734:	cb 01       	movw	r24, r22
    1736:	89 83       	std	Y+1, r24	; 0x01

		number = number - digit * 10;
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	9c 01       	movw	r18, r24
    1740:	22 0f       	add	r18, r18
    1742:	33 1f       	adc	r19, r19
    1744:	c9 01       	movw	r24, r18
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	82 0f       	add	r24, r18
    1750:	93 1f       	adc	r25, r19
    1752:	90 95       	com	r25
    1754:	81 95       	neg	r24
    1756:	9f 4f       	sbci	r25, 0xFF	; 255
    1758:	9c 01       	movw	r18, r24
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	82 0f       	add	r24, r18
    1760:	93 1f       	adc	r25, r19
    1762:	9b 83       	std	Y+3, r25	; 0x03
    1764:	8a 83       	std	Y+2, r24	; 0x02

		UART_vidSendData(digit + 48);
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	88 2f       	mov	r24, r24
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	c0 96       	adiw	r24, 0x30	; 48
    176e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>

		UART_vidSendData(number + 48);
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	9b 81       	ldd	r25, Y+3	; 0x03
    1776:	c0 96       	adiw	r24, 0x30	; 48
    1778:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>
    177c:	8f c0       	rjmp	.+286    	; 0x189c <UART_vidPrintNumber+0x220>

	}
	else if(number >= 100)
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	9b 81       	ldd	r25, Y+3	; 0x03
    1782:	84 36       	cpi	r24, 0x64	; 100
    1784:	91 05       	cpc	r25, r1
    1786:	08 f4       	brcc	.+2      	; 0x178a <UART_vidPrintNumber+0x10e>
    1788:	4f c0       	rjmp	.+158    	; 0x1828 <UART_vidPrintNumber+0x1ac>
	{
		digit = number / 100;
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	9b 81       	ldd	r25, Y+3	; 0x03
    178e:	24 e6       	ldi	r18, 0x64	; 100
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	b9 01       	movw	r22, r18
    1794:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__udivmodhi4>
    1798:	cb 01       	movw	r24, r22
    179a:	89 83       	std	Y+1, r24	; 0x01

		UART_vidSendData(digit + 48);
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	88 2f       	mov	r24, r24
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	c0 96       	adiw	r24, 0x30	; 48
    17a4:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>

		number = number - digit * 100;
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	8c e9       	ldi	r24, 0x9C	; 156
    17b0:	9f ef       	ldi	r25, 0xFF	; 255
    17b2:	ac 01       	movw	r20, r24
    17b4:	24 9f       	mul	r18, r20
    17b6:	c0 01       	movw	r24, r0
    17b8:	25 9f       	mul	r18, r21
    17ba:	90 0d       	add	r25, r0
    17bc:	34 9f       	mul	r19, r20
    17be:	90 0d       	add	r25, r0
    17c0:	11 24       	eor	r1, r1
    17c2:	9c 01       	movw	r18, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	9b 81       	ldd	r25, Y+3	; 0x03
    17c8:	82 0f       	add	r24, r18
    17ca:	93 1f       	adc	r25, r19
    17cc:	9b 83       	std	Y+3, r25	; 0x03
    17ce:	8a 83       	std	Y+2, r24	; 0x02

		digit = number / 10;
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	2a e0       	ldi	r18, 0x0A	; 10
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	b9 01       	movw	r22, r18
    17da:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__udivmodhi4>
    17de:	cb 01       	movw	r24, r22
    17e0:	89 83       	std	Y+1, r24	; 0x01

		number = number - digit * 10;
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	9c 01       	movw	r18, r24
    17ea:	22 0f       	add	r18, r18
    17ec:	33 1f       	adc	r19, r19
    17ee:	c9 01       	movw	r24, r18
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	82 0f       	add	r24, r18
    17fa:	93 1f       	adc	r25, r19
    17fc:	90 95       	com	r25
    17fe:	81 95       	neg	r24
    1800:	9f 4f       	sbci	r25, 0xFF	; 255
    1802:	9c 01       	movw	r18, r24
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	9b 81       	ldd	r25, Y+3	; 0x03
    1808:	82 0f       	add	r24, r18
    180a:	93 1f       	adc	r25, r19
    180c:	9b 83       	std	Y+3, r25	; 0x03
    180e:	8a 83       	std	Y+2, r24	; 0x02

		UART_vidSendData(digit + 48);
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	c0 96       	adiw	r24, 0x30	; 48
    1818:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>

		UART_vidSendData(number + 48);
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	9b 81       	ldd	r25, Y+3	; 0x03
    1820:	c0 96       	adiw	r24, 0x30	; 48
    1822:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>
    1826:	3a c0       	rjmp	.+116    	; 0x189c <UART_vidPrintNumber+0x220>
	}
	else if(number > 10)
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	8b 30       	cpi	r24, 0x0B	; 11
    182e:	91 05       	cpc	r25, r1
    1830:	60 f1       	brcs	.+88     	; 0x188a <UART_vidPrintNumber+0x20e>
	{
		digit = number / 10;
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	9b 81       	ldd	r25, Y+3	; 0x03
    1836:	2a e0       	ldi	r18, 0x0A	; 10
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	b9 01       	movw	r22, r18
    183c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__udivmodhi4>
    1840:	cb 01       	movw	r24, r22
    1842:	89 83       	std	Y+1, r24	; 0x01

		number = number - digit * 10;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	88 2f       	mov	r24, r24
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	9c 01       	movw	r18, r24
    184c:	22 0f       	add	r18, r18
    184e:	33 1f       	adc	r19, r19
    1850:	c9 01       	movw	r24, r18
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	82 0f       	add	r24, r18
    185c:	93 1f       	adc	r25, r19
    185e:	90 95       	com	r25
    1860:	81 95       	neg	r24
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	9c 01       	movw	r18, r24
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	9b 81       	ldd	r25, Y+3	; 0x03
    186a:	82 0f       	add	r24, r18
    186c:	93 1f       	adc	r25, r19
    186e:	9b 83       	std	Y+3, r25	; 0x03
    1870:	8a 83       	std	Y+2, r24	; 0x02

		UART_vidSendData(digit + 48);
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	c0 96       	adiw	r24, 0x30	; 48
    187a:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>

		UART_vidSendData(number + 48);
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	9b 81       	ldd	r25, Y+3	; 0x03
    1882:	c0 96       	adiw	r24, 0x30	; 48
    1884:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>
    1888:	09 c0       	rjmp	.+18     	; 0x189c <UART_vidPrintNumber+0x220>
	}
	else if(number > 0)
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	9b 81       	ldd	r25, Y+3	; 0x03
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	29 f0       	breq	.+10     	; 0x189c <UART_vidPrintNumber+0x220>
	{
		UART_vidSendData(number + 48);
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	9b 81       	ldd	r25, Y+3	; 0x03
    1896:	c0 96       	adiw	r24, 0x30	; 48
    1898:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>
	}
}
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <SendSpeed>:

void SendSpeed(u8 speed)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01
	UART_vidSendData('s');
    18b4:	83 e7       	ldi	r24, 0x73	; 115
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>
	UART_vidSendData(speed);
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>
	UART_vidSendData(255);
    18c6:	8f ef       	ldi	r24, 0xFF	; 255
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>
}
    18ce:	0f 90       	pop	r0
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <SendPosition>:

void SendPosition(u8 position)
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	0f 92       	push	r0
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	89 83       	std	Y+1, r24	; 0x01
	UART_vidSendData('p');
    18e2:	80 e7       	ldi	r24, 0x70	; 112
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>
	UART_vidSendData(position);
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>
	UART_vidSendData(255);
    18f4:	8f ef       	ldi	r24, 0xFF	; 255
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <UART_vidSendData>
}
    18fc:	0f 90       	pop	r0
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <Rotary>:
#include"UART_service.h"

extern volatile u8 CurrentValue;
extern volatile u8 LastValue;
void Rotary (void)
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62

	CurrentValue=DIO_GetPinValue(MY_PORTD,PIN2);
    190c:	83 e0       	ldi	r24, 0x03	; 3
    190e:	62 e0       	ldi	r22, 0x02	; 2
    1910:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_GetPinValue>
    1914:	80 93 6e 00 	sts	0x006E, r24
	if(CurrentValue != LastValue)
    1918:	90 91 6e 00 	lds	r25, 0x006E
    191c:	80 91 72 00 	lds	r24, 0x0072
    1920:	98 17       	cp	r25, r24
    1922:	81 f0       	breq	.+32     	; 0x1944 <Rotary+0x40>
	{
		if(DIO_GetPinValue(MY_PORTA,PIN0) !=CurrentValue)
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_GetPinValue>
    192c:	98 2f       	mov	r25, r24
    192e:	80 91 6e 00 	lds	r24, 0x006E
    1932:	98 17       	cp	r25, r24
    1934:	21 f0       	breq	.+8      	; 0x193e <Rotary+0x3a>
		{
			SendPosition('R');
    1936:	82 e5       	ldi	r24, 0x52	; 82
    1938:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <SendPosition>
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <Rotary+0x40>

		}else{
			SendPosition('L');
    193e:	8c e4       	ldi	r24, 0x4C	; 76
    1940:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <SendPosition>
		}
	}

	LastValue=DIO_GetPinValue(MY_PORTD,PIN2);
    1944:	83 e0       	ldi	r24, 0x03	; 3
    1946:	62 e0       	ldi	r22, 0x02	; 2
    1948:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_GetPinValue>
    194c:	80 93 72 00 	sts	0x0072, r24

}
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <main>:
volatile u8 check;

volatile u16 pulse;                 //for Motor Encoder

int main(void)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	6c 97       	sbiw	r28, 0x1c	; 28
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
	pwm();                           //Initialization for timer peripheral
    196a:	0e 94 a3 05 	call	0xb46	; 0xb46 <pwm>
	UART_vidInit();                 //Initialization for UART peripheral
    196e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <UART_vidInit>
	EXT_INT(0,Logical_change);      // EXT interrupt for rotary encoder at logical change event
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	63 e0       	ldi	r22, 0x03	; 3
    1976:	0e 94 96 09 	call	0x132c	; 0x132c <EXT_INT>
	SET_BIT(SREG_REG,7);            //global interrupt
    197a:	af e5       	ldi	r26, 0x5F	; 95
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	ef e5       	ldi	r30, 0x5F	; 95
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	80 68       	ori	r24, 0x80	; 128
    1986:	8c 93       	st	X, r24

                                                             //MOTOR PINS
	DIO_SetPinDirection(MY_PORTB,PIN0,OUTPUT);              //E_Right
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	41 e0       	ldi	r20, 0x01	; 1
    198e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
	DIO_SetPinDirection(MY_PORTB,PIN1,OUTPUT);             //E_left
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	61 e0       	ldi	r22, 0x01	; 1
    1996:	41 e0       	ldi	r20, 0x01	; 1
    1998:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>

	                               //L298 Driver
	DIO_SetPinDirection(MY_PORTA,PIN6,OUTPUT);
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	66 e0       	ldi	r22, 0x06	; 6
    19a0:	41 e0       	ldi	r20, 0x01	; 1
    19a2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
	DIO_SetPinDirection(MY_PORTA,PIN7,OUTPUT);
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	67 e0       	ldi	r22, 0x07	; 7
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>

	DIO_SetPinDirection(MY_PORTB,PIN2,INPUT);              //MOTOR interrupt
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	62 e0       	ldi	r22, 0x02	; 2
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
	DIO_SetPinValue(MY_PORTB,PIN2,OUTPUT);
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	62 e0       	ldi	r22, 0x02	; 2
    19be:	41 e0       	ldi	r20, 0x01	; 1
    19c0:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_SetPinValue>

	EXT_INT(2,Rising);                         //EXT interrupt for motor encoder at Rising edge event
    19c4:	82 e0       	ldi	r24, 0x02	; 2
    19c6:	61 e0       	ldi	r22, 0x01	; 1
    19c8:	0e 94 96 09 	call	0x132c	; 0x132c <EXT_INT>
                                     //Rotary encoder PINS
	DIO_SetPinDirection(MY_PORTA,PIN0,INPUT);          //CLK
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	40 e0       	ldi	r20, 0x00	; 0
    19d2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
	DIO_SetPinDirection(MY_PORTD,PIN2,INPUT);          //DATA
    19d6:	83 e0       	ldi	r24, 0x03	; 3
    19d8:	62 e0       	ldi	r22, 0x02	; 2
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
                                     //UART PINS
	DIO_SetPinDirection(MY_PORTD,PIN0,INPUT);          //RX
    19e0:	83 e0       	ldi	r24, 0x03	; 3
    19e2:	60 e0       	ldi	r22, 0x00	; 0
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
	DIO_SetPinDirection(MY_PORTD,PIN1,OUTPUT);         //TX
    19ea:	83 e0       	ldi	r24, 0x03	; 3
    19ec:	61 e0       	ldi	r22, 0x01	; 1
    19ee:	41 e0       	ldi	r20, 0x01	; 1
    19f0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
                                     //Optical encoder
	DIO_SetPinDirection(MY_PORTD,PIN3,INPUT);      //set pin input for External event
    19f4:	83 e0       	ldi	r24, 0x03	; 3
    19f6:	63 e0       	ldi	r22, 0x03	; 3
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
	DIO_SetPinValue(MY_PORTD,PIN3,OUTPUT);
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	63 e0       	ldi	r22, 0x03	; 3
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_SetPinValue>

	EXT_INT(1,Rising);                    //EXT interrupt for Optical encoder at Rising edge event
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	61 e0       	ldi	r22, 0x01	; 1
    1a0c:	0e 94 96 09 	call	0x132c	; 0x132c <EXT_INT>

	DIO_SetPinDirection(MY_PORTB,PIN7,INPUT);	       //limit switch
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	67 e0       	ldi	r22, 0x07	; 7
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
	DIO_SetPinValue(MY_PORTB,PIN7,HIGH);
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	67 e0       	ldi	r22, 0x07	; 7
    1a1e:	41 e0       	ldi	r20, 0x01	; 1
    1a20:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_SetPinValue>

	                                    //Initialization for timer 1
	TCCR1A_REG=0x00;                              //CTC mode
    1a24:	ef e4       	ldi	r30, 0x4F	; 79
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	10 82       	st	Z, r1
	SET_BIT(TCCR1B_REG,3);
    1a2a:	ae e4       	ldi	r26, 0x4E	; 78
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	ee e4       	ldi	r30, 0x4E	; 78
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	88 60       	ori	r24, 0x08	; 8
    1a36:	8c 93       	st	X, r24
	                                              //clock select
	CLR_BIT(TCCR1B_REG,0);
    1a38:	ae e4       	ldi	r26, 0x4E	; 78
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	ee e4       	ldi	r30, 0x4E	; 78
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	8e 7f       	andi	r24, 0xFE	; 254
    1a44:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,1);
    1a46:	ae e4       	ldi	r26, 0x4E	; 78
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	ee e4       	ldi	r30, 0x4E	; 78
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8d 7f       	andi	r24, 0xFD	; 253
    1a52:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,2);
    1a54:	ae e4       	ldi	r26, 0x4E	; 78
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	ee e4       	ldi	r30, 0x4E	; 78
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	8b 7f       	andi	r24, 0xFB	; 251
    1a60:	8c 93       	st	X, r24

	OCR1A_REG=46750;                          //output compare match for 1sec
    1a62:	ea e4       	ldi	r30, 0x4A	; 74
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	8e e9       	ldi	r24, 0x9E	; 158
    1a68:	96 eb       	ldi	r25, 0xB6	; 182
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	80 83       	st	Z, r24

	SET_BIT(TIMSK_REG,4);                    //Output Compare A Match Interrupt Enable
    1a6e:	a9 e5       	ldi	r26, 0x59	; 89
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e9 e5       	ldi	r30, 0x59	; 89
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	80 61       	ori	r24, 0x10	; 16
    1a7a:	8c 93       	st	X, r24


	LastValue=DIO_GetPinValue(MY_PORTD,PIN2);
    1a7c:	83 e0       	ldi	r24, 0x03	; 3
    1a7e:	62 e0       	ldi	r22, 0x02	; 2
    1a80:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_GetPinValue>
    1a84:	80 93 72 00 	sts	0x0072, r24

	 MotorStatus('R',HIGH);
    1a88:	82 e5       	ldi	r24, 0x52	; 82
    1a8a:	61 e0       	ldi	r22, 0x01	; 1
    1a8c:	0e 94 0c 06 	call	0xc18	; 0xc18 <MotorStatus>
	 MotorStatus('L',HIGH);
    1a90:	8c e4       	ldi	r24, 0x4C	; 76
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	0e 94 0c 06 	call	0xc18	; 0xc18 <MotorStatus>
    1a98:	08 c0       	rjmp	.+16     	; 0x1aaa <main+0x154>

	 while((DIO_GetPinValue(MY_PORTB,PIN7)==1))
	 {
	        ControlMotorDirection('R',OUTPUT);
    1a9a:	82 e5       	ldi	r24, 0x52	; 82
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	0e 94 44 06 	call	0xc88	; 0xc88 <ControlMotorDirection>
	        RunMotor('R',100);
    1aa2:	82 e5       	ldi	r24, 0x52	; 82
    1aa4:	64 e6       	ldi	r22, 0x64	; 100
    1aa6:	0e 94 29 06 	call	0xc52	; 0xc52 <RunMotor>
	LastValue=DIO_GetPinValue(MY_PORTD,PIN2);

	 MotorStatus('R',HIGH);
	 MotorStatus('L',HIGH);

	 while((DIO_GetPinValue(MY_PORTB,PIN7)==1))
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	67 e0       	ldi	r22, 0x07	; 7
    1aae:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_GetPinValue>
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	91 f3       	breq	.-28     	; 0x1a9a <main+0x144>
	 {
	        ControlMotorDirection('R',OUTPUT);
	        RunMotor('R',100);
	 }
	 	pulse=0;
    1ab6:	10 92 71 00 	sts	0x0071, r1
    1aba:	10 92 70 00 	sts	0x0070, r1
	 	ControlMotorDirection('R',OUTPUT);
    1abe:	82 e5       	ldi	r24, 0x52	; 82
    1ac0:	61 e0       	ldi	r22, 0x01	; 1
    1ac2:	0e 94 44 06 	call	0xc88	; 0xc88 <ControlMotorDirection>
	    RunMotor('R',255);
    1ac6:	82 e5       	ldi	r24, 0x52	; 82
    1ac8:	6f ef       	ldi	r22, 0xFF	; 255
    1aca:	0e 94 29 06 	call	0xc52	; 0xc52 <RunMotor>
    1ace:	08 c0       	rjmp	.+16     	; 0x1ae0 <main+0x18a>

	 while(pulse<=5000)
	 {
	 	 ControlMotorDirection('L',OUTPUT);
    1ad0:	8c e4       	ldi	r24, 0x4C	; 76
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	0e 94 44 06 	call	0xc88	; 0xc88 <ControlMotorDirection>
	 	 RunMotor('L',100);
    1ad8:	8c e4       	ldi	r24, 0x4C	; 76
    1ada:	64 e6       	ldi	r22, 0x64	; 100
    1adc:	0e 94 29 06 	call	0xc52	; 0xc52 <RunMotor>
	 }
	 	pulse=0;
	 	ControlMotorDirection('R',OUTPUT);
	    RunMotor('R',255);

	 while(pulse<=5000)
    1ae0:	80 91 70 00 	lds	r24, 0x0070
    1ae4:	90 91 71 00 	lds	r25, 0x0071
    1ae8:	23 e1       	ldi	r18, 0x13	; 19
    1aea:	89 38       	cpi	r24, 0x89	; 137
    1aec:	92 07       	cpc	r25, r18
    1aee:	80 f3       	brcs	.-32     	; 0x1ad0 <main+0x17a>
	 {
	 	 ControlMotorDirection('L',OUTPUT);
	 	 RunMotor('L',100);
	 }
	 	 pulse=0;
    1af0:	10 92 71 00 	sts	0x0071, r1
    1af4:	10 92 70 00 	sts	0x0070, r1
	 	 ControlMotorDirection('L',OUTPUT);
    1af8:	8c e4       	ldi	r24, 0x4C	; 76
    1afa:	61 e0       	ldi	r22, 0x01	; 1
    1afc:	0e 94 44 06 	call	0xc88	; 0xc88 <ControlMotorDirection>
	 	 RunMotor('L',255);
    1b00:	8c e4       	ldi	r24, 0x4C	; 76
    1b02:	6f ef       	ldi	r22, 0xFF	; 255
    1b04:	0e 94 29 06 	call	0xc52	; 0xc52 <RunMotor>

while(1)
{
	    MotorStatus('R',HIGH);
    1b08:	82 e5       	ldi	r24, 0x52	; 82
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	0e 94 0c 06 	call	0xc18	; 0xc18 <MotorStatus>
        MotorStatus('L',HIGH);
    1b10:	8c e4       	ldi	r24, 0x4C	; 76
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	0e 94 0c 06 	call	0xc18	; 0xc18 <MotorStatus>

		check=UART_u8ReciveData();
    1b18:	0e 94 00 0b 	call	0x1600	; 0x1600 <UART_u8ReciveData>
    1b1c:	80 93 6f 00 	sts	0x006F, r24

         if(check=='1')
    1b20:	80 91 6f 00 	lds	r24, 0x006F
    1b24:	81 33       	cpi	r24, 0x31	; 49
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <main+0x1d4>
    1b28:	a9 c0       	rjmp	.+338    	; 0x1c7c <main+0x326>
    1b2a:	08 c0       	rjmp	.+16     	; 0x1b3c <main+0x1e6>
          {
				 while(pulse<=7000)
				 {
				     ControlMotorDirection('L',OUTPUT);
    1b2c:	8c e4       	ldi	r24, 0x4C	; 76
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	0e 94 44 06 	call	0xc88	; 0xc88 <ControlMotorDirection>
				     RunMotor('L',0);
    1b34:	8c e4       	ldi	r24, 0x4C	; 76
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	0e 94 29 06 	call	0xc52	; 0xc52 <RunMotor>

		check=UART_u8ReciveData();

         if(check=='1')
          {
				 while(pulse<=7000)
    1b3c:	80 91 70 00 	lds	r24, 0x0070
    1b40:	90 91 71 00 	lds	r25, 0x0071
    1b44:	2b e1       	ldi	r18, 0x1B	; 27
    1b46:	89 35       	cpi	r24, 0x59	; 89
    1b48:	92 07       	cpc	r25, r18
    1b4a:	80 f3       	brcs	.-32     	; 0x1b2c <main+0x1d6>
				 {
				     ControlMotorDirection('L',OUTPUT);
				     RunMotor('L',0);
				 }
			    	 ControlMotorDirection('L',OUTPUT);
    1b4c:	8c e4       	ldi	r24, 0x4C	; 76
    1b4e:	61 e0       	ldi	r22, 0x01	; 1
    1b50:	0e 94 44 06 	call	0xc88	; 0xc88 <ControlMotorDirection>
					 RunMotor('L',255);
    1b54:	8c e4       	ldi	r24, 0x4C	; 76
    1b56:	6f ef       	ldi	r22, 0xFF	; 255
    1b58:	0e 94 29 06 	call	0xc52	; 0xc52 <RunMotor>
					 pulse=0;
    1b5c:	10 92 71 00 	sts	0x0071, r1
    1b60:	10 92 70 00 	sts	0x0070, r1

					 ControlMotorDirection('R',INPUT);
    1b64:	82 e5       	ldi	r24, 0x52	; 82
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	0e 94 44 06 	call	0xc88	; 0xc88 <ControlMotorDirection>

					 MotorStatus('R',LOW);
    1b6c:	82 e5       	ldi	r24, 0x52	; 82
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	0e 94 0c 06 	call	0xc18	; 0xc18 <MotorStatus>
					 MotorStatus('L',LOW);
    1b74:	8c e4       	ldi	r24, 0x4C	; 76
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	0e 94 0c 06 	call	0xc18	; 0xc18 <MotorStatus>
					 /*****************L298 Driver**********************/
				 DIO_SetPinValue(MY_PORTA,PIN6,HIGH);
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	66 e0       	ldi	r22, 0x06	; 6
    1b80:	41 e0       	ldi	r20, 0x01	; 1
    1b82:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_SetPinValue>
				 OCR0_REG=50;
    1b86:	ec e5       	ldi	r30, 0x5C	; 92
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	82 e3       	ldi	r24, 0x32	; 50
    1b8c:	80 83       	st	Z, r24
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	aa ef       	ldi	r26, 0xFA	; 250
    1b94:	b3 e4       	ldi	r27, 0x43	; 67
    1b96:	89 8f       	std	Y+25, r24	; 0x19
    1b98:	9a 8f       	std	Y+26, r25	; 0x1a
    1b9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1ba0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e8       	ldi	r19, 0x80	; 128
    1baa:	4b e3       	ldi	r20, 0x3B	; 59
    1bac:	55 e4       	ldi	r21, 0x45	; 69
    1bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	8d 8b       	std	Y+21, r24	; 0x15
    1bb8:	9e 8b       	std	Y+22, r25	; 0x16
    1bba:	af 8b       	std	Y+23, r26	; 0x17
    1bbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e8       	ldi	r20, 0x80	; 128
    1bcc:	5f e3       	ldi	r21, 0x3F	; 63
    1bce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd2:	88 23       	and	r24, r24
    1bd4:	2c f4       	brge	.+10     	; 0x1be0 <main+0x28a>
		__ticks = 1;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9c 8b       	std	Y+20, r25	; 0x14
    1bdc:	8b 8b       	std	Y+19, r24	; 0x13
    1bde:	3f c0       	rjmp	.+126    	; 0x1c5e <main+0x308>
	else if (__tmp > 65535)
    1be0:	6d 89       	ldd	r22, Y+21	; 0x15
    1be2:	7e 89       	ldd	r23, Y+22	; 0x16
    1be4:	8f 89       	ldd	r24, Y+23	; 0x17
    1be6:	98 8d       	ldd	r25, Y+24	; 0x18
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	3f ef       	ldi	r19, 0xFF	; 255
    1bec:	4f e7       	ldi	r20, 0x7F	; 127
    1bee:	57 e4       	ldi	r21, 0x47	; 71
    1bf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf4:	18 16       	cp	r1, r24
    1bf6:	4c f5       	brge	.+82     	; 0x1c4a <main+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e2       	ldi	r20, 0x20	; 32
    1c06:	51 e4       	ldi	r21, 0x41	; 65
    1c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	bc 01       	movw	r22, r24
    1c12:	cd 01       	movw	r24, r26
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9c 8b       	std	Y+20, r25	; 0x14
    1c1e:	8b 8b       	std	Y+19, r24	; 0x13
    1c20:	0f c0       	rjmp	.+30     	; 0x1c40 <main+0x2ea>
    1c22:	8c e2       	ldi	r24, 0x2C	; 44
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	9a 8b       	std	Y+18, r25	; 0x12
    1c28:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c2a:	89 89       	ldd	r24, Y+17	; 0x11
    1c2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <main+0x2d8>
    1c32:	9a 8b       	std	Y+18, r25	; 0x12
    1c34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c36:	8b 89       	ldd	r24, Y+19	; 0x13
    1c38:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	9c 8b       	std	Y+20, r25	; 0x14
    1c3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c40:	8b 89       	ldd	r24, Y+19	; 0x13
    1c42:	9c 89       	ldd	r25, Y+20	; 0x14
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	69 f7       	brne	.-38     	; 0x1c22 <main+0x2cc>
    1c48:	14 c0       	rjmp	.+40     	; 0x1c72 <main+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c50:	98 8d       	ldd	r25, Y+24	; 0x18
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	9c 8b       	std	Y+20, r25	; 0x14
    1c5c:	8b 8b       	std	Y+19, r24	; 0x13
    1c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c60:	9c 89       	ldd	r25, Y+20	; 0x14
    1c62:	98 8b       	std	Y+16, r25	; 0x10
    1c64:	8f 87       	std	Y+15, r24	; 0x0f
    1c66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c68:	98 89       	ldd	r25, Y+16	; 0x10
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <main+0x314>
    1c6e:	98 8b       	std	Y+16, r25	; 0x10
    1c70:	8f 87       	std	Y+15, r24	; 0x0f
			     _delay_ms(500);
			     DIO_SetPinValue(MY_PORTA,PIN6,LOW);
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	66 e0       	ldi	r22, 0x06	; 6
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_SetPinValue>
	 	 }

		if(check=='2')
    1c7c:	80 91 6f 00 	lds	r24, 0x006F
    1c80:	82 33       	cpi	r24, 0x32	; 50
    1c82:	09 f0       	breq	.+2      	; 0x1c86 <main+0x330>
    1c84:	41 cf       	rjmp	.-382    	; 0x1b08 <main+0x1b2>
		{
			ControlMotorDirection('R',OUTPUT);
    1c86:	82 e5       	ldi	r24, 0x52	; 82
    1c88:	61 e0       	ldi	r22, 0x01	; 1
    1c8a:	0e 94 44 06 	call	0xc88	; 0xc88 <ControlMotorDirection>
    1c8e:	08 c0       	rjmp	.+16     	; 0x1ca0 <main+0x34a>
				while((pulse<=9000)&&(DIO_GetPinValue(MY_PORTB,PIN7)==1))
				{
			        ControlMotorDirection('R',OUTPUT);
    1c90:	82 e5       	ldi	r24, 0x52	; 82
    1c92:	61 e0       	ldi	r22, 0x01	; 1
    1c94:	0e 94 44 06 	call	0xc88	; 0xc88 <ControlMotorDirection>
				    RunMotor('R',55);
    1c98:	82 e5       	ldi	r24, 0x52	; 82
    1c9a:	67 e3       	ldi	r22, 0x37	; 55
    1c9c:	0e 94 29 06 	call	0xc52	; 0xc52 <RunMotor>
	 	 }

		if(check=='2')
		{
			ControlMotorDirection('R',OUTPUT);
				while((pulse<=9000)&&(DIO_GetPinValue(MY_PORTB,PIN7)==1))
    1ca0:	80 91 70 00 	lds	r24, 0x0070
    1ca4:	90 91 71 00 	lds	r25, 0x0071
    1ca8:	23 e2       	ldi	r18, 0x23	; 35
    1caa:	89 32       	cpi	r24, 0x29	; 41
    1cac:	92 07       	cpc	r25, r18
    1cae:	30 f4       	brcc	.+12     	; 0x1cbc <main+0x366>
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	67 e0       	ldi	r22, 0x07	; 7
    1cb4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_GetPinValue>
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	51 f3       	breq	.-44     	; 0x1c90 <main+0x33a>
				{
			        ControlMotorDirection('R',OUTPUT);
				    RunMotor('R',55);
				}
					 ControlMotorDirection('R',OUTPUT);
    1cbc:	82 e5       	ldi	r24, 0x52	; 82
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	0e 94 44 06 	call	0xc88	; 0xc88 <ControlMotorDirection>
					 RunMotor('R',255);
    1cc4:	82 e5       	ldi	r24, 0x52	; 82
    1cc6:	6f ef       	ldi	r22, 0xFF	; 255
    1cc8:	0e 94 29 06 	call	0xc52	; 0xc52 <RunMotor>
					 pulse=0;
    1ccc:	10 92 71 00 	sts	0x0071, r1
    1cd0:	10 92 70 00 	sts	0x0070, r1

					 ControlMotorDirection('L',INPUT);
    1cd4:	8c e4       	ldi	r24, 0x4C	; 76
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	0e 94 44 06 	call	0xc88	; 0xc88 <ControlMotorDirection>

					 MotorStatus('R',LOW);
    1cdc:	82 e5       	ldi	r24, 0x52	; 82
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	0e 94 0c 06 	call	0xc18	; 0xc18 <MotorStatus>
					 MotorStatus('L',LOW);
    1ce4:	8c e4       	ldi	r24, 0x4C	; 76
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	0e 94 0c 06 	call	0xc18	; 0xc18 <MotorStatus>
			/*****************L298 Driver**********************/
					 DIO_SetPinValue(MY_PORTA,PIN7,HIGH);
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	67 e0       	ldi	r22, 0x07	; 7
    1cf0:	41 e0       	ldi	r20, 0x01	; 1
    1cf2:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_SetPinValue>
					 OCR0_REG=50;
    1cf6:	ec e5       	ldi	r30, 0x5C	; 92
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	82 e3       	ldi	r24, 0x32	; 50
    1cfc:	80 83       	st	Z, r24
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	aa ef       	ldi	r26, 0xFA	; 250
    1d04:	b3 e4       	ldi	r27, 0x43	; 67
    1d06:	8b 87       	std	Y+11, r24	; 0x0b
    1d08:	9c 87       	std	Y+12, r25	; 0x0c
    1d0a:	ad 87       	std	Y+13, r26	; 0x0d
    1d0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e8       	ldi	r19, 0x80	; 128
    1d1a:	4b e3       	ldi	r20, 0x3B	; 59
    1d1c:	55 e4       	ldi	r21, 0x45	; 69
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8f 83       	std	Y+7, r24	; 0x07
    1d28:	98 87       	std	Y+8, r25	; 0x08
    1d2a:	a9 87       	std	Y+9, r26	; 0x09
    1d2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d30:	78 85       	ldd	r23, Y+8	; 0x08
    1d32:	89 85       	ldd	r24, Y+9	; 0x09
    1d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <main+0x3fa>
		__ticks = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	3f c0       	rjmp	.+126    	; 0x1dce <main+0x478>
	else if (__tmp > 65535)
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	4c f5       	brge	.+82     	; 0x1dba <main+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e2       	ldi	r20, 0x20	; 32
    1d76:	51 e4       	ldi	r21, 0x41	; 65
    1d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <main+0x45a>
    1d92:	8c e2       	ldi	r24, 0x2C	; 44
    1d94:	91 e0       	ldi	r25, 0x01	; 1
    1d96:	9c 83       	std	Y+4, r25	; 0x04
    1d98:	8b 83       	std	Y+3, r24	; 0x03
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <main+0x448>
    1da2:	9c 83       	std	Y+4, r25	; 0x04
    1da4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	9e 83       	std	Y+6, r25	; 0x06
    1dae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	69 f7       	brne	.-38     	; 0x1d92 <main+0x43c>
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <main+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9e 83       	std	Y+6, r25	; 0x06
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <main+0x484>
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	89 83       	std	Y+1, r24	; 0x01
					 _delay_ms(500);
					 DIO_SetPinValue(MY_PORTA,PIN7,LOW);
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	67 e0       	ldi	r22, 0x07	; 7
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_SetPinValue>

					 ControlMotorDirection('R',INPUT);
    1dec:	82 e5       	ldi	r24, 0x52	; 82
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	0e 94 44 06 	call	0xc88	; 0xc88 <ControlMotorDirection>
					 RunMotor('R',255);
    1df4:	82 e5       	ldi	r24, 0x52	; 82
    1df6:	6f ef       	ldi	r22, 0xFF	; 255
    1df8:	0e 94 29 06 	call	0xc52	; 0xc52 <RunMotor>
    1dfc:	85 ce       	rjmp	.-758    	; 0x1b08 <main+0x1b2>

00001dfe <__vector_1>:
}
return 0;
}

ISR(INT0_vect)
{
    1dfe:	1f 92       	push	r1
    1e00:	0f 92       	push	r0
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	0f 92       	push	r0
    1e06:	11 24       	eor	r1, r1
    1e08:	2f 93       	push	r18
    1e0a:	3f 93       	push	r19
    1e0c:	4f 93       	push	r20
    1e0e:	5f 93       	push	r21
    1e10:	6f 93       	push	r22
    1e12:	7f 93       	push	r23
    1e14:	8f 93       	push	r24
    1e16:	9f 93       	push	r25
    1e18:	af 93       	push	r26
    1e1a:	bf 93       	push	r27
    1e1c:	ef 93       	push	r30
    1e1e:	ff 93       	push	r31
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
     Rotary();
    1e28:	0e 94 82 0c 	call	0x1904	; 0x1904 <Rotary>

}
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	ff 91       	pop	r31
    1e32:	ef 91       	pop	r30
    1e34:	bf 91       	pop	r27
    1e36:	af 91       	pop	r26
    1e38:	9f 91       	pop	r25
    1e3a:	8f 91       	pop	r24
    1e3c:	7f 91       	pop	r23
    1e3e:	6f 91       	pop	r22
    1e40:	5f 91       	pop	r21
    1e42:	4f 91       	pop	r20
    1e44:	3f 91       	pop	r19
    1e46:	2f 91       	pop	r18
    1e48:	0f 90       	pop	r0
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	0f 90       	pop	r0
    1e4e:	1f 90       	pop	r1
    1e50:	18 95       	reti

00001e52 <__vector_2>:

ISR(INT1_vect)
{
    1e52:	1f 92       	push	r1
    1e54:	0f 92       	push	r0
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	0f 92       	push	r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	8f 93       	push	r24
    1e5e:	9f 93       	push	r25
    1e60:	af 93       	push	r26
    1e62:	bf 93       	push	r27
    1e64:	ef 93       	push	r30
    1e66:	ff 93       	push	r31
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    count++;                                        //one pulse per revolute
    1e70:	80 91 68 00 	lds	r24, 0x0068
    1e74:	90 91 69 00 	lds	r25, 0x0069
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	90 93 69 00 	sts	0x0069, r25
    1e7e:	80 93 68 00 	sts	0x0068, r24

    CLR_BIT(TCCR1B_REG,0);                          //start timer1
    1e82:	ae e4       	ldi	r26, 0x4E	; 78
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	ee e4       	ldi	r30, 0x4E	; 78
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	8e 7f       	andi	r24, 0xFE	; 254
    1e8e:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B_REG,1);
    1e90:	ae e4       	ldi	r26, 0x4E	; 78
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	ee e4       	ldi	r30, 0x4E	; 78
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	8d 7f       	andi	r24, 0xFD	; 253
    1e9c:	8c 93       	st	X, r24
    SET_BIT(TCCR1B_REG,2);
    1e9e:	ae e4       	ldi	r26, 0x4E	; 78
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	ee e4       	ldi	r30, 0x4E	; 78
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	84 60       	ori	r24, 0x04	; 4
    1eaa:	8c 93       	st	X, r24

}
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	ff 91       	pop	r31
    1eb2:	ef 91       	pop	r30
    1eb4:	bf 91       	pop	r27
    1eb6:	af 91       	pop	r26
    1eb8:	9f 91       	pop	r25
    1eba:	8f 91       	pop	r24
    1ebc:	0f 90       	pop	r0
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	0f 90       	pop	r0
    1ec2:	1f 90       	pop	r1
    1ec4:	18 95       	reti

00001ec6 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1ec6:	1f 92       	push	r1
    1ec8:	0f 92       	push	r0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	0f 92       	push	r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	2f 93       	push	r18
    1ed2:	3f 93       	push	r19
    1ed4:	4f 93       	push	r20
    1ed6:	5f 93       	push	r21
    1ed8:	6f 93       	push	r22
    1eda:	7f 93       	push	r23
    1edc:	8f 93       	push	r24
    1ede:	9f 93       	push	r25
    1ee0:	af 93       	push	r26
    1ee2:	bf 93       	push	r27
    1ee4:	ef 93       	push	r30
    1ee6:	ff 93       	push	r31
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
   SendSpeed(count/100);                         //Update speed every 1sec
    1ef0:	80 91 68 00 	lds	r24, 0x0068
    1ef4:	90 91 69 00 	lds	r25, 0x0069
    1ef8:	24 e6       	ldi	r18, 0x64	; 100
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	b9 01       	movw	r22, r18
    1efe:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__udivmodhi4>
    1f02:	cb 01       	movw	r24, r22
    1f04:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <SendSpeed>
}
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	ff 91       	pop	r31
    1f0e:	ef 91       	pop	r30
    1f10:	bf 91       	pop	r27
    1f12:	af 91       	pop	r26
    1f14:	9f 91       	pop	r25
    1f16:	8f 91       	pop	r24
    1f18:	7f 91       	pop	r23
    1f1a:	6f 91       	pop	r22
    1f1c:	5f 91       	pop	r21
    1f1e:	4f 91       	pop	r20
    1f20:	3f 91       	pop	r19
    1f22:	2f 91       	pop	r18
    1f24:	0f 90       	pop	r0
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	0f 90       	pop	r0
    1f2a:	1f 90       	pop	r1
    1f2c:	18 95       	reti

00001f2e <__vector_3>:
ISR(INT2_vect)
{
    1f2e:	1f 92       	push	r1
    1f30:	0f 92       	push	r0
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	0f 92       	push	r0
    1f36:	11 24       	eor	r1, r1
    1f38:	8f 93       	push	r24
    1f3a:	9f 93       	push	r25
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    pulse++;
    1f44:	80 91 70 00 	lds	r24, 0x0070
    1f48:	90 91 71 00 	lds	r25, 0x0071
    1f4c:	01 96       	adiw	r24, 0x01	; 1
    1f4e:	90 93 71 00 	sts	0x0071, r25
    1f52:	80 93 70 00 	sts	0x0070, r24

}
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	9f 91       	pop	r25
    1f5c:	8f 91       	pop	r24
    1f5e:	0f 90       	pop	r0
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	0f 90       	pop	r0
    1f64:	1f 90       	pop	r1
    1f66:	18 95       	reti

00001f68 <__udivmodhi4>:
    1f68:	aa 1b       	sub	r26, r26
    1f6a:	bb 1b       	sub	r27, r27
    1f6c:	51 e1       	ldi	r21, 0x11	; 17
    1f6e:	07 c0       	rjmp	.+14     	; 0x1f7e <__udivmodhi4_ep>

00001f70 <__udivmodhi4_loop>:
    1f70:	aa 1f       	adc	r26, r26
    1f72:	bb 1f       	adc	r27, r27
    1f74:	a6 17       	cp	r26, r22
    1f76:	b7 07       	cpc	r27, r23
    1f78:	10 f0       	brcs	.+4      	; 0x1f7e <__udivmodhi4_ep>
    1f7a:	a6 1b       	sub	r26, r22
    1f7c:	b7 0b       	sbc	r27, r23

00001f7e <__udivmodhi4_ep>:
    1f7e:	88 1f       	adc	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	5a 95       	dec	r21
    1f84:	a9 f7       	brne	.-22     	; 0x1f70 <__udivmodhi4_loop>
    1f86:	80 95       	com	r24
    1f88:	90 95       	com	r25
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	08 95       	ret

00001f90 <__prologue_saves__>:
    1f90:	2f 92       	push	r2
    1f92:	3f 92       	push	r3
    1f94:	4f 92       	push	r4
    1f96:	5f 92       	push	r5
    1f98:	6f 92       	push	r6
    1f9a:	7f 92       	push	r7
    1f9c:	8f 92       	push	r8
    1f9e:	9f 92       	push	r9
    1fa0:	af 92       	push	r10
    1fa2:	bf 92       	push	r11
    1fa4:	cf 92       	push	r12
    1fa6:	df 92       	push	r13
    1fa8:	ef 92       	push	r14
    1faa:	ff 92       	push	r15
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	ca 1b       	sub	r28, r26
    1fba:	db 0b       	sbc	r29, r27
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	09 94       	ijmp

00001fc8 <__epilogue_restores__>:
    1fc8:	2a 88       	ldd	r2, Y+18	; 0x12
    1fca:	39 88       	ldd	r3, Y+17	; 0x11
    1fcc:	48 88       	ldd	r4, Y+16	; 0x10
    1fce:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fd0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fd2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fd4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fd6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fd8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fda:	b9 84       	ldd	r11, Y+9	; 0x09
    1fdc:	c8 84       	ldd	r12, Y+8	; 0x08
    1fde:	df 80       	ldd	r13, Y+7	; 0x07
    1fe0:	ee 80       	ldd	r14, Y+6	; 0x06
    1fe2:	fd 80       	ldd	r15, Y+5	; 0x05
    1fe4:	0c 81       	ldd	r16, Y+4	; 0x04
    1fe6:	1b 81       	ldd	r17, Y+3	; 0x03
    1fe8:	aa 81       	ldd	r26, Y+2	; 0x02
    1fea:	b9 81       	ldd	r27, Y+1	; 0x01
    1fec:	ce 0f       	add	r28, r30
    1fee:	d1 1d       	adc	r29, r1
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	ed 01       	movw	r28, r26
    1ffc:	08 95       	ret

00001ffe <_exit>:
    1ffe:	f8 94       	cli

00002000 <__stop_program>:
    2000:	ff cf       	rjmp	.-2      	; 0x2000 <__stop_program>
